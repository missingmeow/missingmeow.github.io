"use strict";(self.webpackChunkmissingmeow_github_io=self.webpackChunkmissingmeow_github_io||[]).push([[182],{90:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-376fa880",path:"/posts/cpp-ucontext.html",title:"C++ 协程实现",lang:"zh-CN",frontmatter:{title:"C++ 协程实现",description:"了解 C++ 协程实现，千万级别的并发不再是梦。",date:"2021-07-09T00:00:00.000Z"},excerpt:"",headers:[{level:2,title:"context 初体验",slug:"context-初体验",children:[]},{level:2,title:"ucontext_t 结构体",slug:"ucontext-t-结构体",children:[]},{level:2,title:"context 函数",slug:"context-函数",children:[{level:3,title:"getcontext",slug:"getcontext",children:[]},{level:3,title:"setcontext",slug:"setcontext",children:[]},{level:3,title:"makecontext",slug:"makecontext",children:[]},{level:3,title:"swapcontext",slug:"swapcontext",children:[]}]},{level:2,title:"进阶",slug:"进阶",children:[]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"posts/cpp-ucontext.md",git:{updatedTime:1632387886e3,contributors:[{name:"Socrates",email:"liuzhcloud@gmail.com",commits:1}]}}},64:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(252);const t=(0,e.uE)('<h2 id="context-初体验" tabindex="-1"><a class="header-anchor" href="#context-初体验" aria-hidden="true">#</a> context 初体验</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_XOPEN_SOURCE</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ucontext.h&gt;</span></span>\n \n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ucontext_t context<span class="token punctuation">;</span>\n \n    <span class="token function">getcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面的程序很简单，首先定义了一个保存上下文的结构体变量 <code>context</code>，调用 <code>getcontext</code> 函数获取当前的上下文内容，保存到 <code>context</code> 变量中，打印输出 Hello World，然后再设置一下上下文的内容。</p><p>不知道输出结果有没有猜对呢，没错，就是一直不断的输出 Hello World。下面我们来看看 context 相关的具体内容。</p><h2 id="ucontext-t-结构体" tabindex="-1"><a class="header-anchor" href="#ucontext-t-结构体" aria-hidden="true">#</a> ucontext_t 结构体</h2><p><code>uconext_t</code> 是一个结构体，里面定义了保存上下文所需要的所有内容，我们来看一下 macOS 系统头文件中它的定义：</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>_STRUCT_UCONTEXT\n<span class="token punctuation">{</span>\n  <span class="token keyword">int</span>                     uc_onstack<span class="token punctuation">;</span>\n  __darwin_sigset_t       uc_sigmask<span class="token punctuation">;</span>     <span class="token comment">/* signal mask used by this context */</span>\n  _STRUCT_SIGALTSTACK     uc_stack<span class="token punctuation">;</span>       <span class="token comment">/* stack used by this context */</span>\n  _STRUCT_UCONTEXT        <span class="token operator">*</span>uc_link<span class="token punctuation">;</span>       <span class="token comment">/* pointer to resuming context */</span>\n  __darwin_size_t         uc_mcsize<span class="token punctuation">;</span>      <span class="token comment">/* size of the machine context passed in */</span>\n  _STRUCT_MCONTEXT        <span class="token operator">*</span>uc_mcontext<span class="token punctuation">;</span>   <span class="token comment">/* pointer to machine specific context */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_XOPEN_SOURCE</span></span>\n  _STRUCT_MCONTEXT        __mcontext_data<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* _XOPEN_SOURCE */</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* user context */</span>\n<span class="token keyword">typedef</span> _STRUCT_UCONTEXT        ucontext_t<span class="token punctuation">;</span>     <span class="token comment">/* [???] user context */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>我们挑几个重要的变量来说明一下：</p><ol><li><code>uc_link</code>: 当当前上下文运行终止时系统会恢复<code>uc_link</code>指向的上下文。注意，如果该值为空，则当前上下文执行完后线程会直接退出。</li><li><code>uc_sigmask</code>: 为该上下文中的阻塞信号集合。</li><li><code>uc_stack</code>: 为该上下文中使用的栈。</li><li><code>uc_mcontext</code>: 保存的上下文的特定机器表示，包括调用线程的特定寄存器等，其实现方式依赖于底层运行的系统架构，是平台、硬件相关的。</li></ol><h2 id="context-函数" tabindex="-1"><a class="header-anchor" href="#context-函数" aria-hidden="true">#</a> context 函数</h2><p>跟上下文相关的函数一共只有 4 个，下面我们分别来看看吧。</p><h3 id="getcontext" tabindex="-1"><a class="header-anchor" href="#getcontext" aria-hidden="true">#</a> getcontext</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">getcontext</span><span class="token punctuation">(</span>ucontext_t <span class="token operator">*</span>ucp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>该函数的作用是把当前的上下文保存到 ucp 所指向的内容空间中。</p><h3 id="setcontext" tabindex="-1"><a class="header-anchor" href="#setcontext" aria-hidden="true">#</a> setcontext</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">setcontext</span><span class="token punctuation">(</span><span class="token keyword">const</span> ucontext_t <span class="token operator">*</span>ucp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个函数的作用是将当前程序执行切换到参数ucp所指向的上下文状态中。</p><p><code>setcontext</code> 的上下文 <code>ucp</code> 应该通过 <code>getcontext</code> 或者 <code>makecontext</code> 取得，如果调用成功则不返回。</p><p>如果上下文是通过调用 <code>getcontext</code> 取得，程序会继续执行这个调用。如果上下文是通过调用 <code>makecontext</code> 取得,程序会调用 <code>makecontext</code> 函数的第二个参数指向的函数，如果 <code>func</code> 函数返回，则恢复 <code>makecontext</code> 第一个参数指向的上下文第一个参数指向的上下文 <code>context_t</code> 中指向的 <code>uc_link</code>。如果 <code>uc_link</code> 为 <code>NULL</code>，则线程退出。</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// 通过修改一开始的例子，我们再来看看</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_XOPEN_SOURCE</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ucontext.h&gt;</span></span>\n\n<span class="token keyword">static</span> ucontext_t context<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">getcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ucontext_t main<span class="token punctuation">;</span>\n  <span class="token function">setcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ok\\n&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> ~/Projects/helloworld $ ./a.out           \nhello world\nhello world\nok\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// 再做一点简单的修改</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_XOPEN_SOURCE</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ucontext.h&gt;</span></span>\n\n<span class="token keyword">static</span> ucontext_t context<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> stack<span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token function">getcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  context<span class="token punctuation">.</span>uc_link <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n  context<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_sp <span class="token operator">=</span> stack<span class="token punctuation">;</span>\n  context<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_size <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n  <span class="token function">makecontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// setcontext(&amp;context);</span>\n  ucontext_t main<span class="token punctuation">;</span>\n  <span class="token function">swapcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>main<span class="token punctuation">,</span> <span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ok\\n&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 从输出中发现，不管是 setcontext 还是 swapcontext 都不会输出 ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="makecontext" tabindex="-1"><a class="header-anchor" href="#makecontext" aria-hidden="true">#</a> makecontext</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">makecontext</span><span class="token punctuation">(</span>ucontext_t <span class="token operator">*</span>ucp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>makecontext</code> 修改通过 <code>getcontext</code> 取得的上下文 <code>ucp</code> (这意味着调用 <code>makecontext</code> 前必须先调用 <code>getcontext</code>)。然后给该上下文指定一个栈空间 <code>ucp-&gt;stack</code>，设置后继的上下文 <code>ucp-&gt;uc_link</code>。</p><p>当上下文通过 <code>setcontext</code> 或者 <code>swapcontext</code> 激活后，执行 <code>func</code> 函数，<code>argc</code> 为 <code>func</code> 的参数个数，后面是 <code>func</code> 的参数序列。当 <code>func</code> 执行返回后，继承的上下文被激活，如果继承上下文为 <code>NULL</code> 时，线程退出。</p><h3 id="swapcontext" tabindex="-1"><a class="header-anchor" href="#swapcontext" aria-hidden="true">#</a> swapcontext</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">swapcontext</span><span class="token punctuation">(</span>ucontext_t <span class="token operator">*</span>oucp<span class="token punctuation">,</span> ucontext_t <span class="token operator">*</span>ucp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>保存当前上下文到 <code>oucp</code> 结构体中，然后激活 <code>upc</code> 上下文。可以简单的把 <code>swapcontext = getcontext + setcontext</code>。</p><p>如果执行成功，getcontext 返回 0，setcontext 和 swapcontext不返回；如果执行失败，getcontext, setcontext, swapcontext 返回 -1，并设置对应的errno.</p><p>简单说来，getcontext 获取当前上下文，setcontext 设置当前上下文，swapcontext 切换上下文，makecontext 创建一个新的上下文。</p><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><p>当你把协程相关的基础知识都弄懂弄透后，就可以开始着手协程库的事情，进一步学习请继续学习参考链接中的内容。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',34),p={href:"https://blog.csdn.net/qq910894904/article/details/41911175",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("ucontext-人人都可以实现的简单协程库"),o={href:"https://www.jianshu.com/p/c4de909fee75",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("云风基于C的协程库源码分析"),u={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("a",p,[c,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",o,[l,(0,e.Wm)(a)])])])],64)}}}}]);