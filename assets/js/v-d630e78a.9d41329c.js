"use strict";(self.webpackChunkmissingmeow_github_io=self.webpackChunkmissingmeow_github_io||[]).push([[664],{4217:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-d630e78a",path:"/posts/2021-08-11-interview.html",title:"面试题解",lang:"zh-CN",frontmatter:{title:"面试题解",description:"升职加薪，走上人生巅峰。",date:"2021-08-11T00:00:00.000Z"},excerpt:"",headers:[{level:2,title:"sql 优化",slug:"sql-优化",children:[]},{level:2,title:"索引失效的情况",slug:"索引失效的情况",children:[]},{level:2,title:"如何设计高并发系统",slug:"如何设计高并发系统",children:[]},{level:2,title:"Linux IO 模型",slug:"linux-io-模型",children:[]},{level:2,title:"字典序",slug:"字典序",children:[]},{level:2,title:"请你来介绍一下5种IO模型",slug:"请你来介绍一下5种io模型",children:[]},{level:2,title:"IO 多路复用",slug:"io-多路复用",children:[{level:3,title:"概念",slug:"概念",children:[]},{level:3,title:"实现",slug:"实现",children:[]}]},{level:2,title:"线程模型",slug:"线程模型",children:[]},{level:2,title:"进程",slug:"进程",children:[{level:3,title:"1）正常进程",slug:"_1-正常进程",children:[]},{level:3,title:"2）孤儿进程",slug:"_2-孤儿进程",children:[]},{level:3,title:"3）僵尸进程",slug:"_3-僵尸进程",children:[]}]},{level:2,title:"MVC 和 MVVM",slug:"mvc-和-mvvm",children:[{level:3,title:"MVC",slug:"mvc",children:[]},{level:3,title:"MVVM",slug:"mvvm",children:[]}]},{level:2,title:"死锁条件",slug:"死锁条件",children:[]},{level:2,title:"进程与线程间通信",slug:"进程与线程间通信",children:[{level:3,title:"进程间通信的方式",slug:"进程间通信的方式",children:[]},{level:3,title:"线程间通信的方式",slug:"线程间通信的方式",children:[]}]}],filePathRelative:"posts/2021-08-11-interview.md",git:{updatedTime:163836561e4,contributors:[{name:"Socrates",email:"liuzhcloud@gmail.com",commits:1}]}}},5454:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t=(0,p.uE)('<h2 id="sql-优化" tabindex="-1"><a class="header-anchor" href="#sql-优化" aria-hidden="true">#</a> sql 优化</h2><ol><li>Sql语句及索引优化 sql语句分析： explain【type,select_type】</li><li>数据库表结构优化（范式）</li><li>系统配置</li><li>硬件配置</li></ol><h2 id="索引失效的情况" tabindex="-1"><a class="header-anchor" href="#索引失效的情况" aria-hidden="true">#</a> 索引失效的情况</h2><ol><li>模糊匹配 % 在前面</li><li>数据类型隐示转换</li><li>Or 语句前后没有同时使用索引</li><li>使用 !=</li><li>Where 中对字段使用表达式或函数操作</li></ol><h2 id="如何设计高并发系统" tabindex="-1"><a class="header-anchor" href="#如何设计高并发系统" aria-hidden="true">#</a> 如何设计高并发系统</h2><ol><li>系统拆分；秒杀业务这种放置到高配服务器上</li><li>缓存；常用数据放到 Redis 内存缓存中</li><li>RocketMQ；消息队列，高并发写的数据先放置到消息队列中，后面再慢慢消化</li><li>分库分表；</li><li>读写分离；主库写入，从库读取。从库还可随意扩张</li><li>ElasticSearch；可随便扩容</li><li>前端页面加速；浏览器缓存，CDN加速，IP 限流</li></ol><h2 id="linux-io-模型" tabindex="-1"><a class="header-anchor" href="#linux-io-模型" aria-hidden="true">#</a> Linux IO 模型</h2><ol><li>阻塞IO。 调用 - 等待内核数据报准备好 - 从内核空间复制到用户空间 - 返回</li><li>非阻塞IO。 调用 - EA\bGAIN/EWOULDBOLCK（轮询） - 调用 - 从内核空间复制到用户空间 - 返回</li><li>IO多路复用。 select/poll/epoll</li><li>信号驱动IO。 调用 - 继续自己的操作 - 内核数据包准备好 - 信号通知调用端 - 调用 - 从内核空间复制到用户空间 - 返回</li><li>异步IO。调用 - 继续自己的操作 - \b内核数据报准备好 - 从内核空间复制到用户空间 - 通知\b调用端直接读取数据</li></ol><h2 id="字典序" tabindex="-1"><a class="header-anchor" href="#字典序" aria-hidden="true">#</a> 字典序</h2><p>以输入为 358764 为例，字典序算法的步骤：</p><ol><li>从原排列中，从右至左，找到第一个左邻小于右邻的字符，记左邻位置为 a。示例中 a=1，list[a] = 5。</li><li>重新从右至左，找到第一个比 list[a] 大的字符，记为位置为 b。示例中 b=4，list[b] = 6。</li><li>交换 a 和 b 两个位置的值。示例变为了 368754。</li><li>将 a 后面的数，由小到大排列。示例变为了 364578。</li></ol><h2 id="请你来介绍一下5种io模型" tabindex="-1"><a class="header-anchor" href="#请你来介绍一下5种io模型" aria-hidden="true">#</a> 请你来介绍一下5种IO模型</h2><ol><li>阻塞IO:调用者调用了某个函数，等待这个函数返回，期间什么也不做，不停的去检查这个函数有没有返回，必须等这个函数返回才能进行下一步动作</li><li>非阻塞IO:非阻塞等待，每隔一段时间就去检测IO事件是否就绪。没有就绪就可以做其他事。</li><li>信号驱动IO:linux用套接口进行信号驱动IO，安装一个信号处理函数，进程继续运行并不阻塞，当IO时间就绪，进程收到SIGIO信号。然后处理IO事件。</li><li>IO复用/多路转接IO:linux用select/poll函数实现IO复用模型，这两个函数也会使进程阻塞，但是和阻塞IO所不同的是这两个函数可以同时阻塞多个IO操作。而且可以同时对多个读操作、写操作的IO函数进行检测。知道有数据可读或可写时，才真正调用IO操作函数</li><li>异步IO:linux中，可以调用aio_read函数告诉内核描述字缓冲区指针和缓冲区的大小、文件偏移及通知的方式，然后立即返回，当内核将数据拷贝到缓冲区后，再通知应用程序。</li></ol><h2 id="io-多路复用" tabindex="-1"><a class="header-anchor" href="#io-多路复用" aria-hidden="true">#</a> IO 多路复用</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>IO复用模型在阻塞IO模型上多了一个select函数，select函数有一个参数是文件描述符集合，意思就是对这些的文件描述符进行循环监听，当某个文件描述符就绪的时候，就对这个文件描述符进行处理。</p><p>这种IO模型是属于阻塞的IO。但是由于它可以对多个文件描述符进行阻塞监听，所以它的效率比阻塞IO模型高效。</p><p>IO多路复用就是我们说的select，poll，epoll。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p><p>I/O多路复用和阻塞I/O其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><h4 id="_2、select" tabindex="-1"><a class="header-anchor" href="#_2、select" aria-hidden="true">#</a> 2、select</h4><p>select：是最初解决IO阻塞问题的方法。用结构体fd_set来告诉内核监听多个文件描述符，该结构体被称为描述符集。由数组来维持哪些描述符被置位了。对结构体的操作封装在三个宏定义中。通过轮寻来查找是否有描述符要被处理。</p><p>存在的问题：</p><ol><li>内置数组的形式使得select的最大文件数受限与FD_SIZE；</li><li>每次调用select前都要重新初始化描述符集，将fd从用户态拷贝到内核态，每次调用select后，都需要将fd从内核态拷贝到用户态；</li><li>轮寻排查当文件描述符个数很多时，效率很低；</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span>\n\n<span class="token keyword">int</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    fd_set rfds<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>\n\n    <span class="token comment">/* Watch stdin (fd 0) to see when it has input. */</span>\n\n    <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rfds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">FD_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* Wait up to five seconds. */</span>\n\n    tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    retval <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfds<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">/* Don&#39;t rely on the value of tv now! */</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;select()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Data is available now.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/* FD_ISSET(0, &amp;rfds) will be true. */</span>\n    <span class="token keyword">else</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;No data within five seconds.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="_3、poll" tabindex="-1"><a class="header-anchor" href="#_3、poll" aria-hidden="true">#</a> 3、poll</h4><p>poll：通过一个可变长度的数组解决了select文件描述符受限的问题。数组中元素是结构体，该结构体保存描述符的信息，每增加一个文件描述符就向数组中加入一个结构体，结构体只需要拷贝一次到内核态。poll解决了select重复初始化的问题。轮寻排查的问题未解决。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* poll_input.c\n\n    Licensed under GNU General Public License v2 or later.\n*/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">errExit</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token function">perror</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>\n                        <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>\n\n<span class="token keyword">int</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> nfds<span class="token punctuation">,</span> num_open_fds<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>pfds<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s file...\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    num_open_fds <span class="token operator">=</span> nfds <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    pfds <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>nfds<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">&quot;malloc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* Open each file on command line, and add it &#39;pfds&#39; array. */</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nfds<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Opened \\&quot;%s\\&quot; on fd %d\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Keep calling poll() as long as at least one file descriptor is\n        open. */</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>num_open_fds <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ready<span class="token punctuation">;</span>\n\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;About to poll()\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>pfds<span class="token punctuation">,</span> nfds<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ready <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">&quot;poll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Ready: %d\\n&quot;</span><span class="token punctuation">,</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* Deal with array returned by poll(). */</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nfds<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  fd=%d; events: %s%s%s\\n&quot;</span><span class="token punctuation">,</span> pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">,</span>\n                        <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token string">&quot;POLLIN &quot;</span>  <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;POLLHUP &quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLERR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;POLLERR &quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">ssize_t</span> s <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n                        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;    read %zd bytes: %.*s\\n&quot;</span><span class="token punctuation">,</span>\n                            s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> s<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">/* POLLERR | POLLHUP */</span>\n                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;    closing fd %d\\n&quot;</span><span class="token punctuation">,</span> pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>pfds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n                        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    num_open_fds<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;All file descriptors closed; bye\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br></div></div><h4 id="_4、epoll" tabindex="-1"><a class="header-anchor" href="#_4、epoll" aria-hidden="true">#</a> 4、epoll</h4><p>epoll：轮寻排查所有文件描述符的效率不高，使服务器并发能力受限。因此，epoll采用只返回状态发生变化的文件描述符，便解决了轮寻的瓶颈。</p><p>epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式</p><ol><li><p>LT模式</p><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p></li><li><p>ET模式</p><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p><p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p></li><li><p>LT模式与ET模式的区别如下：</p><p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</p><p>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EVENTS</span> <span class="token expression"><span class="token number">10</span></span></span>\n<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">,</span> events<span class="token punctuation">[</span>MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> listen_sock<span class="token punctuation">,</span> conn_sock<span class="token punctuation">,</span> nfds<span class="token punctuation">,</span> epollfd<span class="token punctuation">;</span>\n\n<span class="token comment">/* Code to set up listening socket, &#39;listen_sock&#39;,\n    (socket(), bind(), listen()) omitted. */</span>\n\nepollfd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>epollfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_create1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>\nev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> listen_sock<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> listen_sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_ctl: listen_sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nfds <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENTS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nfds <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_wait&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nfds<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">==</span> listen_sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            conn_sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listen_sock<span class="token punctuation">,</span>\n                                <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn_sock <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">setnonblocking</span><span class="token punctuation">(</span>conn_sock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET<span class="token punctuation">;</span>\n            ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> conn_sock<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> conn_sock<span class="token punctuation">,</span>\n                        <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_ctl: conn_sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">do_use_fd</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h2 id="线程模型" tabindex="-1"><a class="header-anchor" href="#线程模型" aria-hidden="true">#</a> 线程模型</h2><ol><li><p>生产者消费者模型</p><p>其核心是使用一个缓存来保存任务。开启一个/多个线程来生产任务，然后再开启一个/多个来从缓存中取出任务进行处理。</p></li><li><p>master - worker 模型</p><p>主线程负责接收任务分发到子线程执行。</p></li></ol><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><h3 id="_1-正常进程" tabindex="-1"><a class="header-anchor" href="#_1-正常进程" aria-hidden="true">#</a> 1）正常进程</h3><p>正常情况下，子进程是通过父进程创建的，子进程再创建新的进程。子进程的结束和父进程的运行是一个异步过程，即父进程永远无法预测子进程到底什么时候结束。 当一个进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。</p><p>unix提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到：在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。 但是仍然为其保留一定的信息，直到父进程通过wait / waitpid来取时才释放。保存信息包括：</p><ol><li>进程号the process ID</li><li>退出状态the termination status of the process</li><li>运行时间the amount of CPU time taken by the process等</li></ol><h3 id="_2-孤儿进程" tabindex="-1"><a class="header-anchor" href="#_2-孤儿进程" aria-hidden="true">#</a> 2）孤儿进程</h3><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p><h3 id="_3-僵尸进程" tabindex="-1"><a class="header-anchor" href="#_3-僵尸进程" aria-hidden="true">#</a> 3）僵尸进程</h3><p>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。</p><p>僵尸进程是一个进程必然会经过的过程：这是每个子进程在结束时都要经过的阶段。</p><p>如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。</p><p>如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</p><p>危害：</p><p>如果进程不调用wait / waitpid的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程。</p><p>外部消灭：</p><p>通过kill发送SIGTERM或者SIGKILL信号消灭产生僵尸进程的进程，它产生的僵死进程就变成了孤儿进程，这些孤儿进程会被init进程接管，init进程会wait()这些孤儿进程，释放它们占用的系统进程表中的资源</p><p>内部解决：</p><p>1、子进程退出时向父进程发送SIGCHILD信号，父进程处理SIGCHILD信号。在信号处理函数中调用wait进行处理僵尸进程。</p><p>2、fork两次，原理是将子进程成为孤儿进程，从而其的父进程变为init进程，通过init进程可以处理僵尸进程。</p><h2 id="mvc-和-mvvm" tabindex="-1"><a class="header-anchor" href="#mvc-和-mvvm" aria-hidden="true">#</a> MVC 和 MVVM</h2><ol><li>视图（View）：用户界面。</li><li>控制器（Controller）：业务逻辑</li><li>模型（Model）：数据保存</li></ol><h3 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h3><p>即 Model - View - Controller</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015020105.png" alt="MVC"></p><ol><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ol><p>所有通信都是单向的。</p><h3 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h3><p>即 Model - View - View Model</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="MVVM"></p><p>View 和 Model 不通讯。</p><p>View 和 View Model 以及 Model 和 View Model 的通讯都是双向的。</p>',70),e=(0,p.Uk)("参考链接："),o={href:"https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("MVC，MVP 和 MVVM 的图示"),c=(0,p.uE)('<h2 id="死锁条件" tabindex="-1"><a class="header-anchor" href="#死锁条件" aria-hidden="true">#</a> 死锁条件</h2><ol><li>互斥条件。每个资源要么已经分配给了一个进程，要么就是可用的。</li><li>占有和等待条件。已经得到某个资源的进程可以再请求新的资源，且如果因请求资源而阻塞时，对已获资源保持不放。</li><li>不可抢占条件。已经分配给一个进程的资源不能强制性被抢占，它只能被占有它的进程显式地释放。</li><li>环路等待条件。死锁发生时，系统中一定有由两个或两个以上的进程组成的一条环路，该环路中的每个进程都在等待着下一个进程所占有的资源。</li></ol><h2 id="进程与线程间通信" tabindex="-1"><a class="header-anchor" href="#进程与线程间通信" aria-hidden="true">#</a> 进程与线程间通信</h2><h3 id="进程间通信的方式" tabindex="-1"><a class="header-anchor" href="#进程间通信的方式" aria-hidden="true">#</a> 进程间通信的方式</h3><p>进程间通信主要包括管道、系统IPC（包括消息队列、信号量、信号、共享内存等）、以及套接字socket。</p><h4 id="_1-管道" tabindex="-1"><a class="header-anchor" href="#_1-管道" aria-hidden="true">#</a> 1.管道</h4><p>管道主要包括无名管道和命名管道:管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信</p><p>1.1 普通管道PIPE：</p><ol><li>它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端</li><li>它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）</li><li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。</li></ol><p>1.2 命名管道FIFO：</p><ol><li>FIFO可以在无关的进程之间交换数据</li><li>FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。</li></ol><h4 id="_2-系统ipc" tabindex="-1"><a class="header-anchor" href="#_2-系统ipc" aria-hidden="true">#</a> 2. 系统IPC</h4><h5 id="_2-1-消息队列" tabindex="-1"><a class="header-anchor" href="#_2-1-消息队列" aria-hidden="true">#</a> 2.1 消息队列</h5><p>消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标记。 (消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点)具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；</p><p>特点：</p><ol><li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。</li><li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。</li><li>消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。</li></ol><h5 id="_2-2-信号量semaphore" tabindex="-1"><a class="header-anchor" href="#_2-2-信号量semaphore" aria-hidden="true">#</a> 2.2 信号量semaphore</h5><p>信号量（semaphore）与已经介绍过的 IPC 结构不同，它是一个计数器，可以用来控制多个进程对共享资源的访问。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</p><p>特点：</p><ol><li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存。</li><li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。</li><li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。</li><li>支持信号量组。</li></ol><h5 id="_2-3-信号signal" tabindex="-1"><a class="header-anchor" href="#_2-3-信号signal" aria-hidden="true">#</a> 2.3 信号signal</h5><p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p><h5 id="_2-4-共享内存-shared-memory" tabindex="-1"><a class="header-anchor" href="#_2-4-共享内存-shared-memory" aria-hidden="true">#</a> 2.4 共享内存（Shared Memory）</h5><p>它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等</p><p>特点：</p><ol><li>共享内存是最快的一种IPC，因为进程是直接对内存进行存取</li><li>因为多个进程可以同时操作，所以需要进行同步</li><li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问</li></ol><h4 id="_3-套接字socket" tabindex="-1"><a class="header-anchor" href="#_3-套接字socket" aria-hidden="true">#</a> 3.套接字SOCKET</h4><p>socket也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同主机之间的进程通信。</p><h3 id="线程间通信的方式" tabindex="-1"><a class="header-anchor" href="#线程间通信的方式" aria-hidden="true">#</a> 线程间通信的方式</h3><p>临界区：通过多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问；</p><p>互斥量Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问</p><p>信号量Semphare：为控制具有有限数量的用户资源而设计的，它允许多个线程在同一时刻去访问同一个资源，但一般需要限制同一时刻访问此资源的最大线程数目。</p><p>事件(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</p>',33),i={},u=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",o,[l,(0,p.Wm)(a)])]),c],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);