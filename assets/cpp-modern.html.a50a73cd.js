import{r as e,o,c,a as s,b as p,F as l,d as t,e as n}from"./app.74b92c89.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=t(`<h2 id="c-11" tabindex="-1"><a class="header-anchor" href="#c-11" aria-hidden="true">#</a> C++11</h2><h3 id="nullptr" tabindex="-1"><a class="header-anchor" href="#nullptr" aria-hidden="true">#</a> nullptr</h3><p><code>nullptr</code>\u4E3B\u8981\u662F\u4E3A\u4E86\u66FF\u4EE3<code>NULL</code>\u3002<code>nullptr</code>\u7684\u7C7B\u578B\u4E3A <code>nullptr_t</code>\uFF0C\u80FD\u591F\u9690\u5F0F\u7684\u8F6C\u6362\u4E3A\u4EFB\u4F55\u6307\u9488\u6216\u6210\u5458\u6307\u9488\u7684\u7C7B\u578B\uFF0C\u4E5F\u80FD\u548C\u4ED6\u4EEC\u8FDB\u884C\u76F8\u7B49\u6216\u8005\u4E0D\u7B49\u7684\u6BD4\u8F83\u3002</p><h3 id="constexpr" tabindex="-1"><a class="header-anchor" href="#constexpr" aria-hidden="true">#</a> constexpr</h3><p><code>constexpr</code>\u8BA9\u7528\u6237\u663E\u5F0F\u7684\u58F0\u660E\u51FD\u6570\u6216\u5BF9\u8C61\u6784\u9020\u51FD\u6570\u5728\u7F16\u8BD1\u5668\u4F1A\u6210\u4E3A\u5E38\u6570\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>constexpr <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5408\u6CD5</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h3><p><code>auto</code> \u5173\u952E\u5B57\u8FDB\u884C\u7C7B\u578B\u63A8\u5BFC\u3002\u4E0D\u80FD\u7528\u4E8E\u51FD\u6570\u4F20\u53C2\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u4E0D\u7528\u7C7B\u578B\u63A8\u5BFC\u4E4B\u524D</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>const_iterator itr <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> itr <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>itr<span class="token punctuation">)</span>
<span class="token comment">// \u4F7F\u7528auto\u540E</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> itr <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> itr <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="decltype" tabindex="-1"><a class="header-anchor" href="#decltype" aria-hidden="true">#</a> decltype</h3><p><code>decltype</code> \u5173\u952E\u5B57\u662F\u4E3A\u4E86\u89E3\u51B3<code>auto</code>\u5173\u952E\u5B57\u53EA\u80FD\u5BF9\u53D8\u91CF\u8FDB\u884C\u7C7B\u578B\u63A8\u5BFC\u7684\u7F3A\u9677\u800C\u51FA\u73B0\u7684\u3002</p><p><strong>\u6CE8\u610F\u5982\u679C\u5BF9\u8C61\u7684\u540D\u5B57\u5E26\u6709\u62EC\u53F7\uFF0C\u90A3\u4E48\u5B83\u4F1A\u88AB\u5F53\u505A\u901A\u5E38\u7684\u5DE6\u503C\u8868\u8FBE\u5F0F\uFF0C\u4ECE\u800C decltype(x) \u548C decltype((x)) \u901A\u5E38\u662F\u4E0D\u540C\u7684\u7C7B\u578B\u3002</strong></p><p>\u5728\u96BE\u4EE5\u6216\u4E0D\u53EF\u80FD\u4EE5\u6807\u51C6\u5199\u6CD5\u8FDB\u884C\u58F0\u660E\u7684\u7C7B\u578B\u65F6\uFF0Cdecltype \u5F88\u6709\u7528\uFF0C\u4F8B\u5982 lambda \u76F8\u5173\u7C7B\u578B\u6216\u4F9D\u8D56\u4E8E\u6A21\u677F\u5F62\u53C2\u7684\u7C7B\u578B\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> z<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> A<span class="token operator">*</span> a<span class="token punctuation">;</span>
<span class="token function">decltype</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span> y<span class="token punctuation">;</span>       <span class="token comment">// y \u7684\u7C7B\u578B\u662F double\uFF08\u5176\u58F0\u660E\u7C7B\u578B\uFF09</span>
<span class="token function">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> z <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// z \u7684\u7C7B\u578B\u662F const double&amp;\uFF08\u5DE6\u503C\u8868\u8FBE\u5F0F\uFF09</span>

<span class="token comment">// \u51FD\u6570\u6A21\u677F</span>
template<span class="token operator">&lt;</span>typename T<span class="token punctuation">,</span> typename U<span class="token operator">&gt;</span>
<span class="token keyword">auto</span> <span class="token function">add</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> U y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="\u533A\u95F4\u8FED\u4EE3" tabindex="-1"><a class="header-anchor" href="#\u533A\u95F4\u8FED\u4EE3" aria-hidden="true">#</a> \u533A\u95F4\u8FED\u4EE3</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u4F7F\u7528\u65B0\u7248\u7279\u6027\u4FBF\u5229\u5143\u7D20\u7684\u524D\u540E\u5BF9\u6BD4\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator i <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// &amp; \u542F\u7528\u4E86\u5F15\u7528, \u5982\u679C\u6CA1\u6709\u5219\u5BF9 arr \u4E2D\u7684\u5143\u7D20\u53EA\u80FD\u8BFB\u53D6\u4E0D\u80FD\u4FEE\u6539</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="std-initializer-list" tabindex="-1"><a class="header-anchor" href="#std-initializer-list" aria-hidden="true">#</a> std::initializer_list</h3><p>\u5141\u8BB8\u6784\u9020\u51FD\u6570\u6216\u5176\u4ED6\u51FD\u6570\u50CF\u53C2\u6570\u4E00\u6837\u4F7F\u7528\u521D\u59CB\u5316\u5217\u8868\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list&gt;</span></span>

<span class="token comment">// \u6784\u9020\u51FD\u6570</span>
class Magic <span class="token punctuation">{</span>
public<span class="token operator">:</span>
    <span class="token function">Magic</span><span class="token punctuation">(</span>std<span class="token operator">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Magic magic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u666E\u901A\u51FD\u6570</span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="\u7C7B\u578B\u522B\u540D" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u522B\u540D" aria-hidden="true">#</a> \u7C7B\u578B\u522B\u540D</h3><p>\u901A\u5E38\u6211\u4EEC\u4F7F\u7528<code>typedef</code>\u5B9A\u4E49\u522B\u540D\u7684\u8BED\u6CD5\u662F\uFF1A<code>typedef \u539F\u540D\u79F0 \u65B0\u540D\u79F0</code>;C++11\u4F7F\u7528<code>using</code>\u5F15\u5165\u4E86\u4E0B\u9762\u8FD9\u79CD\u5F62\u5F0F\u7684\u5199\u6CD5\uFF0C\u5E76\u4E14\u540C\u65F6\u652F\u6301\u5BF9\u4F20\u7EDF<code>typedef</code>\u76F8\u540C\u7684\u529F\u6548\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>process<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5B9A\u4E49\u4E86\u4E00\u4E2A\u8FD4\u56DE\u7C7B\u578B\u4E3A int\uFF0C\u53C2\u6570\u4E3A void* \u7684\u51FD\u6570\u6307\u9488\u7C7B\u578B\uFF0C\u540D\u5B57\u53EB\u505A process</span>
using process <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u540C\u4E0A, \u66F4\u52A0\u76F4\u89C2</span>
using NewType <span class="token operator">=</span> SuckType<span class="token operator">&lt;</span>std<span class="token operator">::</span>vector<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span>
using vecIter <span class="token operator">=</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>const_iterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="\u59D4\u6258\u6784\u9020\u4E0E\u7EE7\u627F\u6784\u9020" tabindex="-1"><a class="header-anchor" href="#\u59D4\u6258\u6784\u9020\u4E0E\u7EE7\u627F\u6784\u9020" aria-hidden="true">#</a> \u59D4\u6258\u6784\u9020\u4E0E\u7EE7\u627F\u6784\u9020</h3><p>C++ 11\u5F15\u5165\u4E86\u59D4\u6258\u6784\u9020\u7684\u6982\u5FF5\uFF0C\u8FD9\u4F7F\u5F97\u6784\u9020\u51FD\u6570\u53EF\u4EE5\u5728\u540C\u4E00\u4E2A\u7C7B\u4E2D\u4E00\u4E2A\u6784\u9020\u51FD\u6570\u8C03\u7528\u53E6\u4E00\u4E2A\u6784\u9020\u51FD\u6570\uFF0C\u4ECE\u800C\u8FBE\u5230\u7B80\u5316\u4EE3\u7801\u7684\u76EE\u7684\u3002\u5728\u4F20\u7EDFC++ \u4E2D\uFF0C\u6784\u9020\u51FD\u6570\u5982\u679C\u9700\u8981\u7EE7\u627F\u662F\u9700\u8981\u5C06\u53C2\u6570\u4E00\u4E00\u4F20\u9012\u7684\uFF0C\u8FD9\u5C06\u5BFC\u81F4\u6548\u7387\u4F4E\u4E0B\u3002C++ 11\u5229\u7528\u5173\u952E\u5B57<code>using</code>\u5F15\u5165\u4E86\u7EE7\u627F\u6784\u9020\u51FD\u6570\u7684\u6982\u5FF5\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Base <span class="token punctuation">{</span>
public<span class="token operator">:</span>
    <span class="token keyword">int</span> value1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> value2<span class="token punctuation">;</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u59D4\u6258 Base() \u6784\u9020\u51FD\u6570</span>
        value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
class Subclass <span class="token operator">:</span> public Base <span class="token punctuation">{</span>
public<span class="token operator">:</span>
    using Base<span class="token operator">::</span>Base<span class="token punctuation">;</span>          <span class="token comment">// \u7EE7\u627F\u6784\u9020</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Subclass <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>value1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>value2 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="override" tabindex="-1"><a class="header-anchor" href="#override" aria-hidden="true">#</a> override</h3><p>\u5F53\u91CD\u8F7D\u865A\u51FD\u6570\u65F6\uFF0C\u5F15\u5165 <code>override</code> \u5173\u952E\u5B57\u5C06\u663E\u5F0F\u7684\u544A\u77E5\u7F16\u8BD1\u5668\u8FDB\u884C\u91CD\u8F7D\uFF0C\u7F16\u8BD1\u5668\u5C06\u68C0\u67E5\u57FA\u51FD\u6570\u662F\u5426\u5B58\u5728\u8FD9\u6837\u7684\u865A\u51FD\u6570\uFF0C\u5426\u5219\u5C06\u65E0\u6CD5\u901A\u8FC7\u7F16\u8BD1\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
    virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">SubClass</span><span class="token operator">:</span> Base <span class="token punctuation">{</span>
    virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span> <span class="token comment">// \u5408\u6CD5</span>
    virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span> <span class="token comment">// \u975E\u6CD5, \u7236\u7C7B\u6CA1\u6709\u6B64\u865A\u51FD\u6570</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h3><p><code>final</code> \u5219\u662F\u4E3A\u4E86\u9632\u6B62\u7C7B\u88AB\u7EE7\u7EED\u7EE7\u627F\u4EE5\u53CA\u7EC8\u6B62\u865A\u51FD\u6570\u7EE7\u7EED\u91CD\u8F7D\u5F15\u5165\u7684\u3002 \u5B98\u65B9\u5B9A\u4E49\uFF1A\u6307\u5B9A\u67D0\u4E2A\u865A\u51FD\u6570\u4E0D\u80FD\u5728\u5B50\u7C7B\u4E2D\u88AB\u8986\u76D6\uFF0C\u6216\u8005\u67D0\u4E2A\u7C7B\u4E0D\u80FD\u88AB\u5B50\u7C7B\u7EE7\u627F\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
    virtual <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> final<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">SubClass1</span> final<span class="token operator">:</span> Base <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment">// \u5408\u6CD5</span>

<span class="token keyword">struct</span> <span class="token class-name">SubClass2</span> <span class="token operator">:</span> SubClass1 <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment">// \u975E\u6CD5, SubClass1 \u5DF2 final</span>

<span class="token keyword">struct</span> <span class="token class-name">SubClass3</span><span class="token operator">:</span> Base <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u975E\u6CD5, foo \u5DF2 final</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="lambda\u8868\u8FBE\u5F0F" tabindex="-1"><a class="header-anchor" href="#lambda\u8868\u8FBE\u5F0F" aria-hidden="true">#</a> lambda\u8868\u8FBE\u5F0F</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token punctuation">[</span>\u6355\u83B7\u5217\u8868<span class="token punctuation">]</span><span class="token punctuation">(</span>\u53C2\u6570\u5217\u8868<span class="token punctuation">)</span> <span class="token keyword">mutable</span><span class="token punctuation">(</span>\u53EF\u9009<span class="token punctuation">)</span> \u5F02\u5E38\u5C5E\u6027 <span class="token operator">-&gt;</span> \u8FD4\u56DE\u7C7B\u578B <span class="token punctuation">{</span>
    <span class="token comment">// \u51FD\u6570\u4F53</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Lambda \u91CC\u9762\u7684\u5B9E\u73B0\u7EC6\u8282\uFF0C\u5176\u5B9E\u662F\u7F16\u8BD1\u5668\u4E3A\u6211\u4EEC\u521B\u5EFA\u4E86\u4E00\u4E2A\u7C7B\uFF0C\u8FD9\u4E2A\u7C7B\u91CD\u8F7D\u4E86()\uFF0C\u8BA9\u6211\u4EEC\u53EF\u4EE5\u50CF\u8C03\u7528\u51FD\u6570\u4E00\u6837\u4F7F\u7528\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// User Code</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">template</span><span class="token operator">&amp;</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span> ele<span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// Complier generated</span>
<span class="token keyword">class</span> <span class="token class-name">_SomeCompilerGeneratedName_</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">template</span><span class="token operator">&amp;</span> ele<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        ele<span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5BF9\u4E8E\u6355\u83B7\u53D8\u91CF\u7684 Lambda \u7684\u8868\u8FBE\u5F0F\u6765\u8BF4\uFF0C\u7F16\u8BD1\u5668\u5728\u521B\u5EFA\u7C7B\u7684\u65F6\u5019\uFF0C\u901A\u8FC7\u6210\u5458\u51FD\u6570\u7684\u5F62\u5F0F\u4FDD\u5B58\u4E86\u9700\u8981\u6355\u83B7\u7684\u53D8\u91CF\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// User Code</span>
<span class="token punctuation">[</span><span class="token operator">&amp;</span>total<span class="token punctuation">,</span> offset<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span> total <span class="token operator">+=</span> ele<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// Compiler generated</span>
<span class="token keyword">class</span> <span class="token class-name">_SomeCompilerGeneratedName_</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">_SomeCompilerGeneratedName_</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">total_</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">offset_</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token operator">&amp;</span> ele<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        total_ <span class="token operator">+=</span> ele<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> total_<span class="token punctuation">;</span>
    <span class="token keyword">int</span> offset_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,39),k=n("\u53C2\u8003\u94FE\u63A5\uFF1A"),d={href:"https://www.cnblogs.com/diegodu/p/9377438.html",target:"_blank",rel:"noopener noreferrer"},b=n("\u8FD9\u91CC"),m=n("\uFF0C"),h={href:"https://blog.csdn.net/freshui/article/details/55098799",target:"_blank",rel:"noopener noreferrer"},g=n("\u8FD9\u91CC"),f=t(`<h3 id="std-function" tabindex="-1"><a class="header-anchor" href="#std-function" aria-hidden="true">#</a> std::function</h3><p>\u7C7B\u6A21\u677F std::function \u662F\u901A\u7528\u591A\u6001\u51FD\u6570\u5C01\u88C5\u5668\u3002 std::function \u7684\u5B9E\u4F8B\u80FD\u5B58\u50A8\u3001\u590D\u5236\u53CA\u8C03\u7528\u4EFB\u4F55\u53EF\u590D\u5236\u6784\u9020 (CopyConstructible) \u7684\u53EF\u8C03\u7528 (Callable) \u76EE\u6807\u2014\u2014\u51FD\u6570\u3001 lambda \u8868\u8FBE\u5F0F\u3001 bind \u8868\u8FBE\u5F0F\u6216\u5176\u4ED6\u51FD\u6570\u5BF9\u8C61\uFF0C\u8FD8\u6709\u6307\u5411\u6210\u5458\u51FD\u6570\u6307\u9488\u548C\u6307\u5411\u6570\u636E\u6210\u5458\u6307\u9488\u3002</p><p>\u5B58\u50A8\u7684\u53EF\u8C03\u7528\u5BF9\u8C61\u88AB\u79F0\u4E3A std::function \u7684\u76EE\u6807\u3002\u82E5 std::function \u4E0D\u542B\u76EE\u6807\uFF0C\u5219\u79F0\u5B83\u4E3A\u7A7A\u3002\u8C03\u7528\u7A7A std::function \u7684\u76EE\u6807\u5BFC\u81F4\u629B\u51FA std::bad_function_call \u5F02\u5E38\u3002</p><p>std::function \u6EE1\u8DB3\u53EF\u590D\u5236\u6784\u9020 (CopyConstructible) \u548C\u53EF\u590D\u5236\u8D4B\u503C (CopyAssignable) \u3002</p><p>std::function \u5B9E\u9645\u4E0A\u4E5F\u662F\u4E00\u4E2A\u5C01\u88C5\u7684\u7C7B\uFF0C\u91CC\u9762\u6709\u4E2A\u6210\u5458\u53D8\u91CF\uFF0C\u7C7B\u578B\u4E3A\u51FD\u6570\u6307\u9488\uFF0C\u4FDD\u5B58\u5B83\u7BA1\u7406\u7684\u51FD\u6570\u6307\u9488\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Rp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>_ArgTypes<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">_Rp</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> __function<span class="token double-colon punctuation">::</span>__value_func<span class="token operator">&lt;</span><span class="token function">_Rp</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> __func<span class="token punctuation">;</span>

    __func __f_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> para<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> para<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// std::function \u5305\u88C5\u4E86\u4E00\u4E2A\u8FD4\u56DE\u503C\u4E3A int, \u53C2\u6570\u4E3A int \u7684\u51FD\u6570</span>
    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> func <span class="token operator">=</span> foo<span class="token punctuation">;</span>

    <span class="token keyword">int</span> important <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> func2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>value<span class="token operator">+</span>important<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="std-bind-std-placeholder" tabindex="-1"><a class="header-anchor" href="#std-bind-std-placeholder" aria-hidden="true">#</a> std::bind/std::placeholder</h3><p>\u51FD\u6570\u6A21\u677F bind \u751F\u6210 f \u7684\u8F6C\u53D1\u8C03\u7528\u5305\u88C5\u5668\u3002\u8C03\u7528\u6B64\u5305\u88C5\u5668\u7B49\u4EF7\u4E8E\u4EE5\u4E00\u4E9B\u7ED1\u5B9A\u5230 args \u7684\u53C2\u6570\u8C03\u7528 f \u3002</p><p>\u53C2\u6570</p><ol><li>f - \u53EF\u8C03\u7528 (Callable) \u5BF9\u8C61\uFF08\u51FD\u6570\u5BF9\u8C61\u3001\u6307\u5411\u51FD\u6570\u6307\u9488\u3001\u5230\u51FD\u6570\u5F15\u7528\u3001\u6307\u5411\u6210\u5458\u51FD\u6570\u6307\u9488\u6216\u6307\u5411\u6570\u636E\u6210\u5458\u6307\u9488\uFF09</li><li>args - \u8981\u7ED1\u5B9A\u7684\u53C2\u6570\u5217\u8868\uFF0C\u672A\u7ED1\u5B9A\u53C2\u6570\u4E3A\u547D\u540D\u7A7A\u95F4 std::placeholders \u7684\u5360\u4F4D\u7B26_1,_2,_3... \u6240\u66FF\u6362</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5C06\u53C2\u65701,2\u7ED1\u5B9A\u5230\u51FD\u6570 foo \u4E0A\uFF0C\u4F46\u662F\u4F7F\u7528 std::placeholders::_1 \u6765\u5BF9\u7B2C\u4E00\u4E2A\u53C2\u6570\u8FDB\u884C\u5360\u4F4D</span>
    <span class="token keyword">auto</span> bindFoo <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FD9\u65F6\u8C03\u7528 bindFoo \u65F6\uFF0C\u53EA\u9700\u8981\u63D0\u4F9B\u7B2C\u4E00\u4E2A\u53C2\u6570\u5373\u53EF</span>
    <span class="token function">bindFoo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="std-tuple" tabindex="-1"><a class="header-anchor" href="#std-tuple" aria-hidden="true">#</a> std::tuple</h3><p>\u5173\u4E8E\u5143\u7EC4\u7684\u4F7F\u7528\u6709\u4E09\u4E2A\u6838\u5FC3\u7684\u51FD\u6570\uFF1A</p><ol><li><code>std::make_tuple</code>: \u6784\u9020\u5143\u7EC4</li><li><code>std::get</code>: \u83B7\u5F97\u5143\u7EC4\u67D0\u4E2A\u4F4D\u7F6E\u7684\u503C</li><li><code>std::tie</code>: \u5143\u7EC4\u62C6\u5305</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">auto</span> <span class="token function">get_student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u8FD4\u56DE\u7C7B\u578B\u88AB\u63A8\u65AD\u4E3A std::tuple&lt;double, char, std::string&gt;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u5F20\u4E09&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u674E\u56DB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u738B\u4E94&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5982\u679C\u53EA\u5199 0 \u4F1A\u51FA\u73B0\u63A8\u65AD\u9519\u8BEF, \u7F16\u8BD1\u5931\u8D25</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> student <span class="token operator">=</span> <span class="token function">get_student</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ID: 0, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GPA: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\u6210\u7EE9: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\u59D3\u540D: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> gpa<span class="token punctuation">;</span>
    <span class="token keyword">char</span> grade<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>

    <span class="token comment">// \u5143\u7EC4\u8FDB\u884C\u62C6\u5305</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>gpa<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ID: 1, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GPA: &quot;</span> <span class="token operator">&lt;&lt;</span> gpa <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\u6210\u7EE9: &quot;</span> <span class="token operator">&lt;&lt;</span> grade <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span>
    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\u59D3\u540D: &quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><strong>std::ignore</strong> \u4EFB\u4F55\u503C\u5747\u53EF\u8D4B\u7ED9\u800C\u65E0\u6548\u679C\u7684\u672A\u6307\u5B9A\u7C7B\u578B\u7684\u5BF9\u8C61\u3002\u76EE\u7684\u662F\u4EE4 std::tie \u5728\u89E3\u5305 std::tuple \u65F6\u4F5C\u4E3A\u4E0D\u4F7F\u7528\u7684\u53C2\u6570\u7684\u5360\u4F4D\u7B26\u4F7F\u7528\u3002</p><p>\u4E0B\u4F8B\u89E3\u5305 set.insert() \u6240\u8FD4\u56DE\u7684 pair \uFF0C\u4F46\u53EA\u4FDD\u5B58\u5E03\u5C14\u503C\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> set_of_str<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> inserted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ignore<span class="token punctuation">,</span> inserted<span class="token punctuation">)</span> <span class="token operator">=</span> set_of_str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value was inserted successfully\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="\u667A\u80FD\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u667A\u80FD\u6307\u9488" aria-hidden="true">#</a> \u667A\u80FD\u6307\u9488</h3><p><code>std::shared_ptr</code> \u5B9E\u73B0\u4E86\u5F15\u7528\u8BA1\u6570\uFF0C\u5B83\u80FD\u591F\u8BB0\u5F55\u591A\u5C11\u4E2A <code>shared_ptr</code> \u5171\u540C\u6307\u5411\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u4ECE\u800C\u6D88\u9664\u663E\u5F0F\u7684\u8C03\u7528 <code>delete</code>\uFF0C\u5F53\u5F15\u7528\u8BA1\u6570\u53D8\u4E3A\u96F6\u7684\u65F6\u5019\u5C31\u4F1A\u5C06\u5BF9\u8C61\u81EA\u52A8\u5220\u9664\u3002</p><p>\u7C7B\u53EF\u7EE7\u627F <code>std::enable_shared_from_this</code>\uFF0C\u53EF\u76F4\u63A5\u8C03\u7528\u8BE5\u7C7B\u4E2D\u5B9A\u4E49\u7684\u51FD\u6570<code>shared_from_this()</code> \u751F\u6210\u4E00\u4E2A\u526F\u672C\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">enable_shared_from_this</span><span class="token operator">&lt;</span><span class="token class-name">Foo</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>std::unique_ptr</code> \u662F\u4E00\u79CD\u72EC\u5360\u7684\u667A\u80FD\u6307\u9488\uFF0C\u5B83\u7981\u6B62\u5176\u4ED6\u667A\u80FD\u6307\u9488\u4E0E\u5176\u5171\u4EAB\u540C\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u4ECE\u800C\u4FDD\u8BC1\u4EE3\u7801\u7684\u5B89\u5168\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pointer <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// make_unique \u4ECE C++14 \u5F15\u5165</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pointer2 <span class="token operator">=</span> pointer<span class="token punctuation">;</span> <span class="token comment">// \u975E\u6CD5</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pointer3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5408\u6CD5</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>std::weak_ptr</code> \u5F31\u5F15\u7528\u4E0D\u4F1A\u589E\u52A0\u5F15\u7528\u8BA1\u6570\u3002std::weak_ptr \u6CA1\u6709 * \u8FD0\u7B97\u7B26\u548C -&gt; \u8FD0\u7B97\u7B26\uFF0C\u6240\u4EE5\u4E0D\u80FD\u591F\u5BF9\u8D44\u6E90\u8FDB\u884C\u64CD\u4F5C\uFF0C\u5B83\u7684\u552F\u4E00\u4F5C\u7528\u5C31\u662F\u7528\u4E8E\u68C0\u67E5 std::shared_ptr \u662F\u5426\u5B58\u5728\uFF0C\u5176 expired() \u65B9\u6CD5\u80FD\u5728\u8D44\u6E90\u672A\u88AB\u91CA\u653E\u65F6\uFF0C\u4F1A\u8FD4\u56DE false\uFF0C\u5426\u5219\u8FD4\u56DE true\u3002</p><p>\u6CE8\u610F\u7684\u662F\u6211\u4EEC\u4E0D\u80FD\u901A\u8FC7weak_ptr\u76F4\u63A5\u8BBF\u95EE\u5BF9\u8C61\u7684\u65B9\u6CD5\uFF0C\u6BD4\u5982B\u5BF9\u8C61\u4E2D\u6709\u4E00\u4E2A\u65B9\u6CD5 print(),\u6211\u4EEC\u4E0D\u80FD\u8FD9\u6837\u8BBF\u95EE\uFF0Cpa-&gt;pb_-&gt;print(); \u82F1\u6587pb_\u662F\u4E00\u4E2Aweak_ptr\uFF0C\u5E94\u8BE5\u5148\u628A\u5B83\u8F6C\u5316\u4E3A shared_ptr,\u5982\uFF1Ashared_ptr p = pa-&gt;pb_.lock(); p-&gt;print();</p><h3 id="\u4E92\u65A5\u9501" tabindex="-1"><a class="header-anchor" href="#\u4E92\u65A5\u9501" aria-hidden="true">#</a> \u4E92\u65A5\u9501</h3><p>C++11 \u63D0\u4F9B\u7684\u4E92\u65A5\u7C7B\u5176\u5B9E\u4E0D\u6B62\u4E00\u4E2A\uFF0C\u53EA\u4E0D\u8FC7\u6211\u4EEC\u6700\u5E38\u7528\u7684\u5C31\u662F mutex \u800C\u5DF2\uFF0C\u6211\u4EEC\u53EF\u4EE5\u770B\u770B\u8FD8\u6709\u54EA\u4E9B\uFF1A</p><ol><li><code>mutex</code> \u7C7B\u662F\u80FD\u7528\u4E8E\u4FDD\u62A4\u5171\u4EAB\u6570\u636E\u514D\u53D7\u4ECE\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u7684\u540C\u6B65\u539F\u8BED\u3002mutex \u63D0\u4F9B\u6392\u4ED6\u6027\u975E\u9012\u5F52\u6240\u6709\u6743\u8BED\u4E49\uFF1A <ul><li>\u8C03\u7528\u65B9\u7EBF\u7A0B\u4ECE\u5B83\u6210\u529F\u8C03\u7528 lock \u6216 try_lock \u5F00\u59CB\uFF0C\u5230\u5B83\u8C03\u7528 unlock \u4E3A\u6B62\u5360\u6709 mutex \u3002</li><li>\u7EBF\u7A0B\u5360\u6709 mutex \u65F6\uFF0C\u6240\u6709\u5176\u4ED6\u7EBF\u7A0B\u82E5\u8BD5\u56FE\u8981\u6C42 mutex \u7684\u6240\u6709\u6743\uFF0C\u5219\u5C06\u963B\u585E\uFF08\u5BF9\u4E8E lock \u7684\u8C03\u7528\uFF09\u6216\u6536\u5230 false \u8FD4\u56DE\u503C\uFF08\u5BF9\u4E8E try_lock \uFF09.</li><li>\u8C03\u7528\u65B9\u7EBF\u7A0B\u5728\u8C03\u7528 lock \u6216 try_lock \u524D\u5FC5\u987B\u4E0D\u5360\u6709 mutex \u3002</li></ul></li><li><code>timed_mutex</code> \u4EE5\u7C7B\u4F3C mutex \u7684\u884C\u4E3A\uFF0C timed_mutex \u63D0\u4F9B\u6392\u4ED6\u6027\u975E\u9012\u5F52\u6240\u6709\u6743\u8BED\u4E49\u3002\u53E6\u5916\uFF0C timed_mutex \u63D0\u4F9B\u901A\u8FC7 try_lock_for() \u548C try_lock_until() \u65B9\u6CD5\u8BD5\u56FE\u5E26\u65F6\u9650\u5730\u8981\u6C42 timed_mutex \u6240\u6709\u6743\u7684\u80FD\u529B\u3002</li><li><code>recursive_mutex</code> \u7C7B\u662F\u540C\u6B65\u539F\u8BED\uFF0C\u80FD\u7528\u4E8E\u4FDD\u62A4\u5171\u4EAB\u6570\u636E\u514D\u53D7\u4ECE\u4E2A\u591A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u3002recursive_mutex \u63D0\u4F9B\u6392\u4ED6\u6027\u9012\u5F52\u6240\u6709\u6743\u8BED\u4E49\uFF1A <ul><li>\u8C03\u7528\u65B9\u7EBF\u7A0B\u5728\u4ECE\u5B83\u6210\u529F\u8C03\u7528 lock \u6216 try_lock \u5F00\u59CB\u7684\u65F6\u671F\u91CC\u5360\u6709 recursive_mutex \u3002\u6B64\u65F6\u671F\u95F4\uFF0C\u7EBF\u7A0B\u53EF\u4EE5\u8FDB\u884C\u5BF9 lock \u6216 try_lock \u7684\u9644\u52A0\u8C03\u7528\u3002\u6240\u6709\u6743\u7684\u65F6\u671F\u5728\u7EBF\u7A0B\u8C03\u7528 unlock \u5339\u914D\u6B21\u6570\u65F6\u7ED3\u675F\u3002</li><li>\u7EBF\u7A0B\u5360\u6709 recursive_mutex \u65F6\uFF0C\u82E5\u5176\u4ED6\u6240\u6709\u7EBF\u7A0B\u8BD5\u56FE\u8981\u6C42 recursive_mutex \u7684\u6240\u6709\u6743\uFF0C\u5219\u5B83\u4EEC\u5C06\u963B\u585E\uFF08\u5BF9\u4E8E\u8C03\u7528 lock \uFF09\u6216\u6536\u5230 false \u8FD4\u56DE\u503C\uFF08\u5BF9\u4E8E\u8C03\u7528 try_lock \uFF09\u3002</li><li>\u53EF\u9501\u5B9A recursive_mutex \u6B21\u6570\u7684\u6700\u5927\u503C\u662F\u672A\u6307\u5B9A\u7684\uFF0C\u4F46\u62B5\u8FBE\u8BE5\u6570\u540E\uFF0C\u5BF9 lock \u7684\u8C03\u7528\u5C06\u629B\u51FA std::system_error \u800C\u5BF9 try_lock \u7684\u8C03\u7528\u5C06\u8FD4\u56DE false \u3002</li></ul></li><li><code>recursive_timed_mutex</code> \u4EE5\u7C7B\u4F3C <code>std::recursive_mutex</code> \u7684\u65B9\u5F0F\uFF0C recursive_timed_mutex \u63D0\u4F9B\u6392\u4ED6\u6027\u9012\u5F52\u6240\u6709\u6743\u8BED\u4E49\u3002\u53E6\u5916\uFF0C recursive_timed_mutex \u901A\u8FC7 try_lock_for \u4E0E try_lock_until \u65B9\u6CD5\uFF0C\u63D0\u4F9B\u5E26\u65F6\u9650\u5730\u8BD5\u56FE\u8981\u6C42 recursive_timed_mutex \u6240\u6709\u6743\u7684\u80FD\u529B\u3002</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// 4 \u79CD\u4E92\u65A5\u9501\u90FD\u6709\u7684\u65B9\u6CD5</span>
lock \u9501\u5B9A\u4E92\u65A5\uFF0C\u82E5\u4E92\u65A5\u4E0D\u53EF\u7528\u5219\u963B\u585E
try_lock \u5C1D\u8BD5\u9501\u5B9A\u4E92\u65A5\uFF0C\u82E5\u4E92\u65A5\u4E0D\u53EF\u7528\u5219\u8FD4\u56DE
unlock \u89E3\u9501\u4E92\u65A5
<span class="token comment">// timed_mutex\uFF0Crecursive_timed_mutex \u72EC\u6709\u7684\u65B9\u6CD5</span>
try_lock_for \u5C1D\u8BD5\u9501\u5B9A\u4E92\u65A5\uFF0C\u82E5\u4E92\u65A5\u5728\u6307\u5B9A\u7684\u65F6\u9650\u65F6\u671F\u4E2D\u4E0D\u53EF\u7528\u5219\u8FD4\u56DE
try_lock_until \u5C1D\u8BD5\u9501\u5B9A\u4E92\u65A5\uFF0C\u82E5\u76F4\u81F3\u62B5\u8FBE\u6307\u5B9A\u65F6\u95F4\u70B9\u4E92\u65A5\u4E0D\u53EF\u7528\u5219\u8FD4\u56DE
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="\u901A\u7528\u4E92\u65A5\u7BA1\u7406" tabindex="-1"><a class="header-anchor" href="#\u901A\u7528\u4E92\u65A5\u7BA1\u7406" aria-hidden="true">#</a> \u901A\u7528\u4E92\u65A5\u7BA1\u7406</h3><h4 id="_1-std-lock-guard" tabindex="-1"><a class="header-anchor" href="#_1-std-lock-guard" aria-hidden="true">#</a> 1. std::lock_guard</h4><p>\u7C7B lock_guard \u662F\u4E92\u65A5\u4F53\u5305\u88C5\u5668\uFF0C\u4E3A\u5728\u4F5C\u7528\u57DF\u5757\u671F\u95F4\u5360\u6709\u4E92\u65A5\u63D0\u4F9B\u4FBF\u5229 RAII \u98CE\u683C\u673A\u5236\u3002</p><p>\u521B\u5EFA lock_guard \u5BF9\u8C61\u65F6\uFF0C\u5B83\u8BD5\u56FE\u63A5\u6536\u7ED9\u5B9A\u4E92\u65A5\u7684\u6240\u6709\u6743\u3002\u63A7\u5236\u79BB\u5F00\u521B\u5EFA lock_guard \u5BF9\u8C61\u7684\u4F5C\u7528\u57DF\u65F6\uFF0C\u9500\u6BC1 lock_guard \u5E76\u91CA\u653E\u4E92\u65A5\u3002</p><p>lock_guard \u7C7B\u4E0D\u53EF\u590D\u5236\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">some_operation</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>mutex mutex<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...\u64CD\u4F5C</span>

    <span class="token comment">// \u5F53\u79BB\u5F00\u8FD9\u4E2A\u4F5C\u7528\u57DF\u7684\u65F6\u5019\uFF0C\u4E92\u65A5\u9501\u4F1A\u88AB\u6790\u6784\uFF0C\u540C\u65F6unlock\u4E92\u65A5\u9501</span>
    <span class="token comment">// \u56E0\u6B64\u8FD9\u4E2A\u51FD\u6570\u5185\u90E8\u7684\u53EF\u4EE5\u8BA4\u4E3A\u662F\u4E34\u754C\u533A</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_2-std-unique-lock" tabindex="-1"><a class="header-anchor" href="#_2-std-unique-lock" aria-hidden="true">#</a> 2. std::unique_lock</h4><p>\u800C<code>std::unique_lock</code>\u5219\u76F8\u5BF9\u4E8E<code>std::lock_guard</code>\u51FA\u73B0\u7684\uFF0C<code>std::unique_lock</code>\u66F4\u52A0\u7075\u6D3B\uFF0C<code>std::unique_lock</code>\u7684\u5BF9\u8C61\u4F1A\u4EE5\u72EC\u5360\u6240\u6709\u6743\uFF08\u6CA1\u6709\u5176\u4ED6\u7684 <code>unique_lock</code>\u5BF9\u8C61\u540C\u65F6\u62E5\u6709\u67D0\u4E2A<code>mutex</code>\u5BF9\u8C61\u7684\u6240\u6709\u6743\uFF09\u7684\u65B9\u5F0F\u7BA1\u7406<code>mutex</code>\u5BF9\u8C61\u4E0A\u7684\u4E0A\u9501\u548C\u89E3\u9501\u7684\u64CD\u4F5C\u3002\u6240\u4EE5\u5728\u5E76\u53D1\u7F16\u7A0B\u4E2D\uFF0C\u63A8\u8350\u4F7F\u7528<code>std::unique_lock</code>\u3002</p><p>\u7C7B unique_lock \u662F\u901A\u7528\u4E92\u65A5\u5305\u88C5\u5668\uFF0C\u5141\u8BB8\u5EF6\u8FDF\u9501\u5B9A\u3001\u9501\u5B9A\u7684\u6709\u65F6\u9650\u5C1D\u8BD5\u3001\u9012\u5F52\u9501\u5B9A\u3001\u6240\u6709\u6743\u8F6C\u79FB\u548C\u4E0E\u6761\u4EF6\u53D8\u91CF\u4E00\u540C\u4F7F\u7528\u3002</p><p>\u7C7B unique_lock \u53EF\u79FB\u52A8\uFF0C\u4F46\u4E0D\u53EF\u590D\u5236\u2014\u2014\u5B83\u6EE1\u8DB3\u53EF\u79FB\u52A8\u6784\u9020 (MoveConstructible) \u548C\u53EF\u79FB\u52A8\u8D4B\u503C (MoveAssignable) \u4F46\u4E0D\u6EE1\u8DB3\u53EF\u590D\u5236\u6784\u9020 (CopyConstructible) \u6216\u53EF\u590D\u5236\u8D4B\u503C (CopyAssignable) \u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>

std<span class="token operator">::</span>mutex mtx<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">block_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...\u4E34\u754C\u533A</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token operator">::</span>thread <span class="token function">thd1</span><span class="token punctuation">(</span>block_area<span class="token punctuation">)</span><span class="token punctuation">;</span>

    thd1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_3-std-lock" tabindex="-1"><a class="header-anchor" href="#_3-std-lock" aria-hidden="true">#</a> 3. std::lock</h4><p><code>std::lock</code> \u9501\u5B9A\u7ED9\u5B9A\u7684\u53EF\u9501\u5B9A (Lockable) \u5BF9\u8C61 lock1 \u3001 lock2 \u3001 ... \u3001 lockn \uFF0C\u7528\u514D\u6B7B\u9501\u7B97\u6CD5\u907F\u514D\u6B7B\u9501\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
 
<span class="token keyword">struct</span> <span class="token class-name">bank_account</span> <span class="token punctuation">{</span>
    <span class="token keyword">explicit</span> <span class="token function">bank_account</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">balance</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> balance<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>mutex m<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>bank_account <span class="token operator">&amp;</span>from<span class="token punctuation">,</span> bank_account <span class="token operator">&amp;</span>to<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u9501\u5B9A\u4E24\u4E2A\u4E92\u65A5\u800C\u4E0D\u6B7B\u9501</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">lock</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>m<span class="token punctuation">,</span> to<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u4FDD\u8BC1\u4E8C\u4E2A\u5DF2\u9501\u5B9A\u4E92\u65A5\u5728\u4F5C\u7528\u57DF\u7ED3\u5C3E\u89E3\u9501</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock1</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>m<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock2</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>m<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// \u7B49\u4EF7\u65B9\u6CD5\uFF1A</span>
<span class="token comment">//    std::unique_lock&lt;std::mutex&gt; lock1(from.m, std::defer_lock);</span>
<span class="token comment">//    std::unique_lock&lt;std::mutex&gt; lock2(to.m, std::defer_lock);</span>
<span class="token comment">//    std::lock(lock1, lock2);</span>

<span class="token comment">// C++17 \u4E2D\u53EF\u7528\u7684\u8F83\u4F18\u89E3\u6CD5</span>
<span class="token comment">//        std::scoped_lock lk(from.m, to.m);</span>
 
    from<span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>
    to<span class="token punctuation">.</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bank_account <span class="token function">my_account</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bank_account <span class="token function">your_account</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>transfer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>my_account<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>your_account<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>transfer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>your_account<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>my_account<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>\u770B\u5B8C\u4E0A\u9762\u4F8B\u5B50\uFF0C\u518D\u8BF4\u8BF4\u4E92\u65A5\u7BA1\u7406\u4E2D\u7684\u53C2\u6570\u610F\u4E49\uFF1A</p><p><code>std::defer_lock</code> \u3001 <code>std::try_to_lock</code> \u548C <code>std::adopt_lock</code> \u5206\u522B\u662F\u7A7A\u7ED3\u6784\u4F53\u6807\u7B7E\u7C7B\u578B std::defer_lock_t \u3001 std::try_to_lock_t \u548C std::adopt_lock_t \u7684\u5B9E\u4F8B\u3002</p><p>\u5B83\u4EEC\u7528\u4E8E\u4E3A <code>std::lock_guard</code> \u3001 <code>std::unique_lock</code> \u53CA <code>std::shared_lock</code> \u6307\u5B9A\u9501\u5B9A\u7B56\u7565\u3002</p><ol><li>defer_lock_t \u4E0D\u83B7\u5F97\u4E92\u65A5\u7684\u6240\u6709\u6743</li><li>try_to_lock_t \u5C1D\u8BD5\u83B7\u5F97\u4E92\u65A5\u7684\u6240\u6709\u6743\u800C\u4E0D\u963B\u585E</li><li>adopt_lock_t \u5047\u8BBE\u8C03\u7528\u65B9\u7EBF\u7A0B\u5DF2\u62E5\u6709\u4E92\u65A5\u7684\u6240\u6709\u6743</li></ol><h3 id="std-condition-variable" tabindex="-1"><a class="header-anchor" href="#std-condition-variable" aria-hidden="true">#</a> std::condition_variable</h3><p><code>std::condition_variable</code>\u662F\u4E3A\u4E86\u89E3\u51B3\u6B7B\u9501\u800C\u751F\u7684\u3002\u5F53\u4E92\u65A5\u64CD\u4F5C\u4E0D\u591F\u7528\u800C\u5F15\u5165\u7684\u3002\u6BD4\u5982\uFF0C\u7EBF\u7A0B\u53EF\u80FD\u9700\u8981\u7B49\u5F85\u67D0\u4E2A\u6761\u4EF6\u4E3A\u771F\u624D\u80FD\u7EE7\u7EED\u6267\u884C\uFF0C\u800C\u4E00\u4E2A\u5FD9\u7B49\u5F85\u5FAA\u73AF\u4E2D\u53EF\u80FD\u4F1A\u5BFC\u81F4\u6240\u6709\u5176\u4ED6\u7EBF\u7A0B\u90FD\u65E0\u6CD5\u8FDB\u5165\u4E34\u754C\u533A\u4F7F\u5F97\u6761\u4EF6\u4E3A\u771F\u65F6\uFF0C\u5C31\u4F1A\u53D1\u751F\u6B7B\u9501\u3002\u6240\u4EE5\uFF0C<code>condition_variable</code>\u5B9E\u4F8B\u88AB\u521B\u5EFA\u51FA\u73B0\u4E3B\u8981\u5C31\u662F\u7528\u4E8E\u5524\u9192\u7B49\u5F85\u7EBF\u7A0B\u4ECE\u800C\u907F\u514D\u6B7B\u9501\u3002</p><p><code>std::condition_variable</code>\u7684<code>notify_one()</code>\u7528\u4E8E\u5524\u9192\u4E00\u4E2A\u7EBF\u7A0B\uFF1B<code>notify_all()</code>\u5219\u662F\u901A\u77E5\u6240\u6709\u7EBF\u7A0B\u3002</p><p><code>condition_variable_any</code> \u7C7B\u662F <code>std::condition_variable</code> \u7684\u6CDB\u5316\u3002\u76F8\u5BF9\u4E8E\u53EA\u5728 <code>std::unique_lock&lt;std::mutex&gt;</code> \u4E0A\u5DE5\u4F5C\u7684 <code>std::condition_variable</code> \uFF0C <code>condition_variable_any</code> \u80FD\u5728\u4EFB\u4F55\u6EE1\u8DB3\u57FA\u672C\u53EF\u9501\u5B9A (BasicLockable) \u8981\u6C42\u7684\u9501\u4E0A\u5DE5\u4F5C\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u751F\u4EA7\u8005\u6570\u91CF</span>
    std<span class="token operator">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> produced_nums<span class="token punctuation">;</span>
    <span class="token comment">// \u4E92\u65A5\u9501</span>
    std<span class="token operator">::</span>mutex m<span class="token punctuation">;</span>
    <span class="token comment">// \u6761\u4EF6\u53D8\u91CF</span>
    std<span class="token operator">::</span>condition_variable cond_var<span class="token punctuation">;</span>
    <span class="token comment">// \u7ED3\u675F\u6807\u5FD7</span>
    bool done <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token comment">// \u901A\u77E5\u6807\u5FD7</span>
    bool notified <span class="token operator">=</span> false<span class="token punctuation">;</span>

    <span class="token comment">// \u751F\u4EA7\u8005\u7EBF\u7A0B</span>
    std<span class="token operator">::</span>thread <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u521B\u5EFA\u4E92\u65A5\u9501</span>
            std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;producing &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
            produced_nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            notified <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token comment">// \u901A\u77E5\u4E00\u4E2A\u7EBF\u7A0B</span>
            cond_var<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
        done <span class="token operator">=</span> true<span class="token punctuation">;</span>
        cond_var<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token comment">// \u6D88\u8D39\u8005\u7EBF\u7A0B</span>
    std<span class="token operator">::</span>thread <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>notified<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5FAA\u73AF\u907F\u514D\u865A\u5047\u5524\u9192</span>
                cond_var<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>   
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>produced_nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;consuming &quot;</span> <span class="token operator">&lt;&lt;</span> produced_nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
                produced_nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>   
            notified <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    producer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="std-future-std-packaged-task" tabindex="-1"><a class="header-anchor" href="#std-future-std-packaged-task" aria-hidden="true">#</a> std::future/std::packaged_task</h3><h4 id="_1-std-future" tabindex="-1"><a class="header-anchor" href="#_1-std-future" aria-hidden="true">#</a> 1. std::future</h4><p>\u7C7B\u6A21\u677F std::future \u63D0\u4F9B\u8BBF\u95EE\u5F02\u6B65\u64CD\u4F5C\u7ED3\u679C\u7684\u673A\u5236\uFF1A</p><ul><li>\uFF08\u901A\u8FC7 std::async \u3001 std::packaged_task \u6216 std::promise \u521B\u5EFA\u7684\uFF09\u5F02\u6B65\u64CD\u4F5C\u80FD\u63D0\u4F9B\u4E00\u4E2A std::future \u5BF9\u8C61\u7ED9\u8BE5\u5F02\u6B65\u64CD\u4F5C\u7684\u521B\u5EFA\u8005\u3002 \u7136\u540E\uFF0C\u5F02\u6B65\u64CD\u4F5C\u7684\u521B\u5EFA\u8005\u80FD\u7528\u5404\u79CD\u65B9\u6CD5\u67E5\u8BE2\u3001\u7B49\u5F85\u6216\u4ECE std::future \u63D0\u53D6\u503C\u3002\u82E5\u5F02\u6B65\u64CD\u4F5C\u4ECD\u672A\u63D0\u4F9B\u503C\uFF0C\u5219\u8FD9\u4E9B\u65B9\u6CD5\u53EF\u80FD\u963B\u585E\u3002</li><li>\u5F02\u6B65\u64CD\u4F5C\u51C6\u5907\u597D\u53D1\u9001\u7ED3\u679C\u7ED9\u521B\u5EFA\u8005\u65F6\uFF0C\u5B83\u80FD\u901A\u8FC7\u4FEE\u6539\u94FE\u63A5\u5230\u521B\u5EFA\u8005\u7684 std::future \u7684\u5171\u4EAB\u72B6\u6001\uFF08\u4F8B\u5982 std::promise::set_value \uFF09\u8FDB\u884C\u3002</li></ul><p>std::future \u91CC\u9762\u5B9E\u73B0\u5176\u5B9E\u4E5F\u5F88\u7B80\u5355\uFF0C\u6709\u4E2A\u6A21\u677F\u72B6\u6001\u7C7B\u7684\u7684\u5B9E\u4F8B\uFF0C\u91CC\u9762\u4E5F\u4F7F\u7528\u4E86\u5F15\u7528\u8BA1\u6570\uFF0C\u5047\u8BBE std::future \u548C std::promise \u91CC\u72B6\u6001\u7C7B\u5B9E\u4F8B\u662F\u540C\u4E00\u4E2A\uFF0C\u8BE5\u72B6\u6001\u5B9E\u4F8B\u4E2D\u6709\u4E09\u4E2A\u6700\u57FA\u672C\u7684\u53D8\u91CF\uFF1A\u4E92\u65A5\u9501/\u6761\u4EF6\u53D8\u91CF/\u771F\u6B63\u7684\u503C\u53D8\u91CF\u3002\u5F53\u8C03\u7528 std::future::get() \u7684\u65F6\u5019\uFF0C\u4F1A\u5224\u65AD\u503C\u662F\u5426\u6709\u6548\uFF0C\u5982\u679C\u6CA1\u6709\uFF0C\u5219\u4F1A\u4F7F\u7528\u6761\u4EF6\u53D8\u91CF\u8FDB\u884C\u963B\u585E\u7B49\u5F85\u3002\u800C std::promise::set_value() \u5219\u662F\u628A\u8BE5\u503C\u53D8\u91CF\u8D4B\u503C\uFF0C\u5E76\u901A\u8FC7\u6761\u4EF6\u53D8\u91CF\u7684 notify_all() \u6765\u901A\u77E5 future \u8FD4\u56DE\u771F\u6B63\u7684\u503C\u3002</p><h4 id="_2-std-shared-future" tabindex="-1"><a class="header-anchor" href="#_2-std-shared-future" aria-hidden="true">#</a> 2. std::shared_future</h4><p>\u7C7B\u6A21\u677F std::shared_future \u63D0\u4F9B\u8BBF\u95EE\u5F02\u6B65\u64CD\u4F5C\u7ED3\u679C\u7684\u673A\u5236\uFF0C\u7C7B\u4F3C std::future \uFF0C\u9664\u4E86\u5141\u8BB8\u591A\u4E2A\u7EBF\u7A0B\u7B49\u5019\u540C\u4E00\u5171\u4EAB\u72B6\u6001\u3002\u4E0D\u540C\u4E8E\u4EC5\u53EF\u79FB\u52A8\u7684 std::future \uFF08\u6545\u53EA\u6709\u4E00\u4E2A\u5B9E\u4F8B\u80FD\u6307\u4EE3\u4EFB\u4F55\u7279\u5B9A\u7684\u5F02\u6B65\u7ED3\u679C\uFF09\uFF0Cstd::shared_future \u53EF\u590D\u5236\u800C\u4E14\u591A\u4E2A shared_future \u5BF9\u8C61\u80FD\u6307\u4EE3\u540C\u4E00\u5171\u4EAB\u72B6\u6001\u3002</p><p>\u82E5\u6BCF\u4E2A\u7EBF\u7A0B\u901A\u8FC7\u5176\u81EA\u8EAB\u7684 shared_future \u5BF9\u8C61\u526F\u672C\u8BBF\u95EE\uFF0C\u5219\u4ECE\u591A\u4E2A\u7EBF\u7A0B\u8BBF\u95EE\u540C\u4E00\u5171\u4EAB\u72B6\u6001\u662F\u5B89\u5168\u7684\u3002</p><h4 id="_3-std-promise" tabindex="-1"><a class="header-anchor" href="#_3-std-promise" aria-hidden="true">#</a> 3. std::promise</h4><p>\u7C7B\u6A21\u677F std::promise \u63D0\u4F9B\u5B58\u50A8\u503C\u6216\u5F02\u5E38\u7684\u8BBE\u65BD\uFF0C\u4E4B\u540E\u901A\u8FC7 std::promise \u5BF9\u8C61\u6240\u521B\u5EFA\u7684 std::future \u5BF9\u8C61\u5F02\u6B65\u83B7\u5F97\u7ED3\u679C\u3002\u6CE8\u610F std::promise \u53EA\u5E94\u5F53\u4F7F\u7528\u4E00\u6B21\u3002</p><p>\u6BCF\u4E2A promise \u4E0E\u5171\u4EAB\u72B6\u6001\u5173\u8054\uFF0C\u5171\u4EAB\u72B6\u6001\u542B\u6709\u4E00\u4E9B\u72B6\u6001\u4FE1\u606F\u548C\u53EF\u80FD\u4ECD\u672A\u6C42\u503C\u7684\u7ED3\u679C\uFF0C\u5B83\u6C42\u503C\u4E3A\u503C\uFF08\u53EF\u80FD\u4E3A void \uFF09\u6216\u6C42\u503C\u4E3A\u5F02\u5E38\u3002 promise \u53EF\u4EE5\u5BF9\u5171\u4EAB\u72B6\u6001\u505A\u4E09\u4EF6\u4E8B\uFF1A</p><ul><li>\u4F7F\u5C31\u7EEA\uFF1A promise \u5B58\u50A8\u7ED3\u679C\u6216\u5F02\u5E38\u4E8E\u5171\u4EAB\u72B6\u6001\u3002\u6807\u8BB0\u5171\u4EAB\u72B6\u6001\u4E3A\u5C31\u7EEA\uFF0C\u5E76\u89E3\u9664\u963B\u585E\u4EFB\u4F55\u7B49\u5F85\u4E8E\u4E0E\u8BE5\u5171\u4EAB\u72B6\u6001\u5173\u8054\u7684 future \u4E0A\u7684\u7EBF\u7A0B\u3002</li><li>\u91CA\u653E\uFF1A promise \u653E\u5F03\u5176\u5BF9\u5171\u4EAB\u72B6\u6001\u7684\u5F15\u7528\u3002\u82E5\u8FD9\u662F\u6700\u540E\u4E00\u4E2A\u8FD9\u79CD\u5F15\u7528\uFF0C\u5219\u9500\u6BC1\u5171\u4EAB\u72B6\u6001\u3002\u9664\u975E\u8FD9\u662F std::async \u6240\u521B\u5EFA\u7684\u672A\u5C31\u7EEA\u7684\u5171\u4EAB\u72B6\u6001\uFF0C\u5426\u5219\u6B64\u64CD\u4F5C\u4E0D\u963B\u585E\u3002</li><li>\u629B\u5F03\uFF1A promise \u5B58\u50A8\u4EE5 std::future_errc::broken_promise \u4E3A error_code \u7684 std::future_error \u7C7B\u578B\u5F02\u5E38\uFF0C\u4EE4\u5171\u4EAB\u72B6\u6001\u4E3A\u5C31\u7EEA\uFF0C\u7136\u540E\u91CA\u653E\u5B83\u3002</li></ul><h4 id="_4-std-package-task" tabindex="-1"><a class="header-anchor" href="#_4-std-package-task" aria-hidden="true">#</a> 4. std::package_task</h4><p>\u7C7B\u6A21\u677F std::packaged_task \u5305\u88C5\u4EFB\u4F55\u53EF\u8C03\u7528 (Callable) \u76EE\u6807\uFF08\u51FD\u6570\u3001 lambda \u8868\u8FBE\u5F0F\u3001 bind \u8868\u8FBE\u5F0F\u6216\u5176\u4ED6\u51FD\u6570\u5BF9\u8C61\uFF09\uFF0C\u4F7F\u5F97\u80FD\u5F02\u6B65\u8C03\u7528\u5B83\u3002\u5176\u8FD4\u56DE\u503C\u6216\u6240\u629B\u5F02\u5E38\u88AB\u5B58\u50A8\u4E8E\u80FD\u901A\u8FC7 std::future \u5BF9\u8C61\u8BBF\u95EE\u7684\u5171\u4EAB\u72B6\u6001\u4E2D\u3002</p><p>\u6B63\u5982 std::function \uFF0C std::packaged_task \u662F\u591A\u6001\u3001\u5177\u5206\u914D\u5668\u7684\u5BB9\u5668\uFF1A\u53EF\u5728\u5806\u4E0A\u6216\u4EE5\u63D0\u4F9B\u7684\u5206\u914D\u5668\u5206\u914D\u5B58\u50A8\u7684\u53EF\u8C03\u7528\u5BF9\u8C61\u3002</p><p>std::package_task \u5185\u90E8\u5B9E\u73B0\u4E3B\u8981\u901A\u8FC7\u4E24\u4E2A\u6210\u5458\u53D8\u91CF\uFF0C\u4E00\u4E2A\u662F\u521D\u59CB\u5316\u65F6\u9700\u8981\u4FDD\u5B58\u7684\u51FD\u6570\u6307\u9488\uFF0C\u53E6\u4E00\u4E2A\u5C31\u662F\u4F7F\u7528 promise \u5B9E\u4F8B\u5316\u7684\u8FD4\u56DE\u503C\u3002\u901A\u8FC7\u91CD\u8F7D operator() \u8C03\u7528\u771F\u6B63\u7684\u51FD\u6570\u6307\u9488\uFF0C\u628A\u51FD\u6570\u6307\u9488\u7684\u8FD4\u56DE\u503C\u901A\u8FC7 promise::set_value \u8BBE\u7F6E\u8FDB\u53BB\u3002</p><p>\u6240\u4EE5 std::package_task::get_future \u5B9E\u9645\u4E0A\u5C31\u662F std::promise::get_future\uFF0C\u5B9E\u73B0\u5F02\u6B65\u8BFB\u53D6\u503C\u4E0E\u4E0A\u9762\u7684\u4E00\u6837\u3002 \u5728\u5C01\u88C5\u597D\u8981\u8C03\u7528\u7684\u76EE\u6807\u540E\uFF0C\u53EF\u4EE5\u4F7F\u7528<code>get_future()</code>\u6765\u83B7\u5F97\u4E00\u4E2A<code>std::future</code>\u5BF9\u8C61\uFF0C\u4EE5\u4FBF\u4E4B\u540E\u5B9E\u65BD\u7EBF\u7A0B\u540C\u6B65\u3002</p><h4 id="_5-std-async" tabindex="-1"><a class="header-anchor" href="#_5-std-async" aria-hidden="true">#</a> 5. std::async</h4><p>\u51FD\u6570\u6A21\u677F async \u5F02\u6B65\u5730\u8FD0\u884C\u51FD\u6570 f \uFF08\u6F5C\u5728\u5730\u5728\u53EF\u80FD\u662F\u7EBF\u7A0B\u6C60\u4E00\u90E8\u5206\u7684\u5206\u79BB\u7EBF\u7A0B\u4E2D\uFF09\uFF0C\u5E76\u8FD4\u56DE\u6700\u7EC8\u5C06\u4FDD\u6709\u8BE5\u51FD\u6570\u8C03\u7528\u7ED3\u679C\u7684 std::future \u3002</p><ol><li>std::launch::async \u8FD0\u884C\u65B0\u7EBF\u7A0B\uFF0C\u4EE5\u5F02\u6B65\u6267\u884C\u4EFB\u52A1</li><li>std::launch::deferred \u8C03\u7528\u65B9\u7EBF\u7A0B\u4E0A\u9996\u6B21\u8BF7\u6C42\u5176\u7ED3\u679C\u65F6\u6267\u884C\u4EFB\u52A1\uFF08\u60F0\u6027\u6C42\u503C\uFF09</li></ol><ol><li><p>\u8868\u73B0\u5982\u540C\u4EE5 policy \u4E3A std::launch::async | std::launch::deferred \u8C03\u7528\u3002\u6362\u8A00\u4E4B\uFF0C f \u53EF\u80FD\u6267\u884C\u4E8E\u53E6\u4E00\u7EBF\u7A0B\uFF0C\u6216\u8005\u5B83\u53EF\u80FD\u5728\u67E5\u8BE2\u4EA7\u751F\u7684 std::future \u7684\u503C\u65F6\u540C\u6B65\u8FD0\u884C\u3002</p></li><li><p>\u6309\u7167\u7279\u5B9A\u7684\u6267\u884C\u7B56\u7565 policy \uFF0C\u4EE5\u53C2\u6570 args \u8C03\u7528\u51FD\u6570 f \uFF1A</p></li></ol><ul><li>\u82E5\u8BBE\u7F6E async \u6807\u5FD7\uFF08\u5373 (policy &amp; std::launch::async) != 0 \uFF09\uFF0C\u5219 async \u5728\u65B0\u7684\u6267\u884C\u7EBF\u7A0B\uFF08\u521D\u59CB\u5316\u6240\u6709\u7EBF\u7A0B\u5C40\u57DF\u5BF9\u8C61\u540E\uFF09\u6267\u884C\u53EF\u8C03\u7528\u5BF9\u8C61 f \uFF0C\u5982\u540C\u4EA7\u51FA std::thread(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...) \uFF0C\u9664\u4E86\u82E5 f \u8FD4\u56DE\u503C\u6216\u629B\u51FA\u5F02\u5E38\uFF0C\u5219\u4E8E\u53EF\u901A\u8FC7 async \u8FD4\u56DE\u7ED9\u8C03\u7528\u65B9\u7684 std::future \u8BBF\u95EE\u7684\u5171\u4EAB\u72B6\u6001\u5B58\u50A8\u7ED3\u679C\u3002</li><li>\u82E5\u8BBE\u7F6E deferred \u6807\u5FD7\uFF08\u5373 (policy &amp; std::launch::deferred) != 0 \uFF09\uFF0C\u5219 async \u4EE5\u540C std::thread \u6784\u9020\u51FD\u6570\u7684\u65B9\u5F0F\u8F6C\u6362 f \u4E0E args... \uFF0C\u4F46\u4E0D\u4EA7\u51FA\u65B0\u7684\u6267\u884C\u7EBF\u7A0B\u3002\u800C\u662F\u8FDB\u884C\u60F0\u6027\u6C42\u503C\uFF1A\u5728 async \u6240\u8FD4\u56DE\u7684 std::future \u4E0A\u9996\u6B21\u8C03\u7528\u975E\u5B9A\u65F6\u7B49\u5F85\u51FD\u6570\uFF0C\u5C06\u5BFC\u81F4\u5728\u5F53\u524D\u7EBF\u7A0B\uFF08\u4E0D\u5FC5\u662F\u6700\u521D\u8C03\u7528 std::async \u7684\u7EBF\u7A0B\uFF09\u4E2D\uFF0C\u4EE5 args... \uFF08\u4F5C\u4E3A\u53F3\u503C\u4F20\u9012\uFF09\u7684\u526F\u672C\u8C03\u7528 f \uFF08\u4EA6\u4F5C\u4E3A\u53F3\u503C\uFF09\u7684\u526F\u672C\u3002\u5C06\u7ED3\u679C\u6216\u5F02\u5E38\u7F6E\u4E8E\u5173\u8054\u5230\u8BE5 future \u7684\u5171\u4EAB\u72B6\u6001\uFF0C\u7136\u540E\u624D\u4EE4\u5B83\u5C31\u7EEA\u3002\u5BF9\u540C\u4E00 std::future \u7684\u6240\u6709\u540E\u7EED\u8BBF\u95EE\u90FD\u4F1A\u7ACB\u5373\u8FD4\u56DE\u7ED3\u679C\u3002</li><li>\u82E5 policy \u4E2D\u8BBE\u7F6E\u4E86 std::launch::async \u548C std::launch::deferred \u4E24\u4E2A\u6807\u5FD7\uFF0C\u5219\u8FDB\u884C\u5F02\u6B65\u6267\u884C\u8FD8\u662F\u60F0\u6027\u6C42\u503C\u53D6\u51B3\u4E8E\u5B9E\u73B0\u3002</li><li>\u82E5 policy \u4E2D\u672A\u8BBE\u7F6E std::launch::async \u6216 std::launch::deferred \u6216\u4EFB\u4F55\u5B9E\u73B0\u5B9A\u4E49\u7B56\u7565\u6807\u5FD7\uFF0C\u5219\u884C\u4E3A\u672A\u5B9A\u4E49\u3002</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;future&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u6765\u81EA packaged_task \u7684 future</span>
    std<span class="token double-colon punctuation">::</span>packaged_task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5305\u88C5\u51FD\u6570</span>
    std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f1 <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u83B7\u53D6 future</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5728\u7EBF\u7A0B\u4E0A\u8FD0\u884C</span>
 
    <span class="token comment">// \u6765\u81EA async() \u7684 future</span>
    std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">async</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>launch<span class="token double-colon punctuation">::</span>async<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// \u6765\u81EA promise \u7684 future</span>
    std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> f3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>p<span class="token punctuation">]</span><span class="token punctuation">{</span> p<span class="token punctuation">.</span><span class="token function">set_value_at_thread_exit</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Waiting...&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>flush<span class="token punctuation">;</span>
    f1<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f2<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f3<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Done!\\nResults are: &quot;</span>
              <span class="token operator">&lt;&lt;</span> f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> f2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> f3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="std-thread-thread-local" tabindex="-1"><a class="header-anchor" href="#std-thread-thread-local" aria-hidden="true">#</a> std::thread/thread_local</h3><p><code>thread_local</code> \u5173\u952E\u8BCD\u53EA\u5BF9\u58F0\u660E\u4E8E\u547D\u540D\u7A7A\u95F4\u4F5C\u7528\u57DF\u7684\u5BF9\u8C61\u3001\u58F0\u660E\u4E8E\u5757\u4F5C\u7528\u57DF\u7684\u5BF9\u8C61\u53CA\u9759\u6001\u6570\u636E\u6210\u5458\u5141\u8BB8\u3002\u5B83\u6307\u793A\u5BF9\u8C61\u62E5\u6709\u7EBF\u7A0B\u5B58\u50A8\u671F\u3002\u5B83\u80FD\u4E0E <code>static</code> \u6216 <code>extern</code> \u7ED3\u5408\uFF0C\u4EE5\u5206\u522B\u6307\u5B9A\u5185\u90E8\u6216\u5916\u90E8\u94FE\u63A5\uFF08\u9664\u4E86\u9759\u6001\u6570\u636E\u6210\u5458\u59CB\u7EC8\u62E5\u6709\u5916\u90E8\u94FE\u63A5\uFF09\uFF0C\u4F46\u9644\u52A0\u7684 <code>static</code> \u4E0D\u5F71\u54CD\u5B58\u50A8\u671F\u3002</p><p><strong>\u7EBF\u7A0B\u5B58\u50A8\u671F:</strong> \u5BF9\u8C61\u7684\u5B58\u50A8\u5728\u7EBF\u7A0B\u5F00\u59CB\u65F6\u5206\u914D\uFF0C\u800C\u5728\u7EBF\u7A0B\u7ED3\u675F\u65F6\u89E3\u5206\u914D\u3002\u6BCF\u4E2A\u7EBF\u7A0B\u62E5\u6709\u5176\u81EA\u8EAB\u7684\u5BF9\u8C61\u5B9E\u4F8B\u3002\u552F\u6709\u58F0\u660E\u4E3A <code>thread_local</code> \u7684\u5BF9\u8C61\u62E5\u6709\u6B64\u5B58\u50A8\u671F\u3002 <code>thread_local</code> \u80FD\u4E0E <code>static</code> \u6216 <code>extern</code> \u4E00\u540C\u51FA\u73B0\uFF0C\u4EE5\u8C03\u6574\u94FE\u63A5\u3002</p><p>\u8FD9\u91CC\u6709\u4E00\u4E2A\u5F88\u91CD\u8981\u7684\u4FE1\u606F\uFF0C\u5C31\u662F <code>static thread_local</code> \u548C <code>thread_local</code> \u58F0\u660E\u662F\u7B49\u4EF7\u7684\uFF0C\u90FD\u662F\u6307\u5B9A\u53D8\u91CF\u7684\u5468\u671F\u662F\u5728\u7EBF\u7A0B\u5185\u90E8\uFF0C\u5E76\u4E14\u662F\u9759\u6001\u7684\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">thread_local</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">thread_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> thread_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token operator">++</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;thread[&quot;</span> <span class="token operator">&lt;&lt;</span> thread_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]: x = &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>thread_func<span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>thread_func<span class="token punctuation">,</span> <span class="token string">&quot;t2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// thread[t1]: x = 1</span>
<span class="token comment">// thread[t1]: x = 2</span>
<span class="token comment">// thread[t1]: x = 3</span>
<span class="token comment">// thread[t2]: x = 1</span>
<span class="token comment">// thread[t2]: x = 2</span>
<span class="token comment">// thread[t2]: x = 3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="call-once-once-flag" tabindex="-1"><a class="header-anchor" href="#call-once-once-flag" aria-hidden="true">#</a> call_once/once_flag</h3><p>\u7C7B std::once_flag \u662F std::call_once \u7684\u8F85\u52A9\u7C7B\u3002</p><p>\u4F20\u9012\u7ED9\u591A\u4E2A std::call_once \u8C03\u7528\u7684 std::once_flag \u5BF9\u8C61\u5141\u8BB8\u90A3\u4E9B\u8C03\u7528\u5F7C\u6B64\u534F\u8C03\uFF0C\u4ECE\u800C\u53EA\u4EE4\u8C03\u7528\u4E4B\u4E00\u5B9E\u9645\u8FD0\u884C\u5B8C\u6210\u3002</p><p>std::once_flag \u65E2\u4E0D\u53EF\u590D\u5236\u4EA6\u4E0D\u53EF\u79FB\u52A8\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Callable</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">call_once</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>once_flag<span class="token operator">&amp;</span> flag<span class="token punctuation">,</span> Callable<span class="token operator">&amp;&amp;</span> f<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u51C6\u786E\u6267\u884C\u4E00\u6B21\u53EF\u8C03\u7528 (Callable) \u5BF9\u8C61 f \uFF0C\u5373\u4F7F\u540C\u65F6\u4ECE\u591A\u4E2A\u7EBF\u7A0B\u8C03\u7528\u3002</p><p>\u82E5\u5BF9 call_once \u7684\u540C\u65F6\u8C03\u7528\u4F20\u9012\u4E0D\u540C\u7684 f \uFF0C\u5219\u8C03\u7528\u54EA\u4E2A f \u662F\u672A\u6307\u5B9A\u7684\u3002\u88AB\u9009\u62E9\u51FD\u6570\u8FD0\u884C\u4E8E\u4E0E\u4F20\u9012\u5B83\u7684 call_once \u7684\u8C03\u7528\u76F8\u540C\u7684\u7EBF\u7A0B\u3002</p><p>\u5373\u4F7F\u5728\u4ECE\u591A\u4E2A\u7EBF\u7A0B\u8C03\u7528\u65F6\uFF0C\u4E5F\u4FDD\u8BC1\u51FD\u6570\u5C40\u57DF\u9759\u6001\u5BF9\u8C61\u7684\u521D\u59CB\u5316\u4EC5\u51FA\u73B0\u4E00\u6B21\uFF0C\u8FD9\u53EF\u80FD\u6BD4\u4F7F\u7528 std::call_once \u7684\u7B49\u4EF7\u4EE3\u7801\u66F4\u4E3A\u9AD8\u6548\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
 
std<span class="token double-colon punctuation">::</span>once_flag flag1<span class="token punctuation">,</span> flag2<span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">simple_do_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>flag1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Simple example: called once\\n&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">may_throw_function</span><span class="token punctuation">(</span><span class="token keyword">bool</span> do_throw<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_throw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;throw: call_once will retry\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// \u8FD9\u4F1A\u51FA\u73B0\u591A\u4E8E\u4E00\u6B21</span>
    <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Didn&#39;t throw, call_once will not attempt again\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// \u4FDD\u8BC1\u4E00\u6B21</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">do_once</span><span class="token punctuation">(</span><span class="token keyword">bool</span> do_throw<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>flag2<span class="token punctuation">,</span> may_throw_function<span class="token punctuation">,</span> do_throw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">st1</span><span class="token punctuation">(</span>simple_do_once<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">st2</span><span class="token punctuation">(</span>simple_do_once<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">st3</span><span class="token punctuation">(</span>simple_do_once<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">st4</span><span class="token punctuation">(</span>simple_do_once<span class="token punctuation">)</span><span class="token punctuation">;</span>
    st1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>do_once<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>do_once<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t3</span><span class="token punctuation">(</span>do_once<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t4</span><span class="token punctuation">(</span>do_once<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u53EF\u80FD\u7684\u8F93\u51FA\uFF1A</span>
<span class="token comment">// Simple example: called once</span>
<span class="token comment">// throw: call_once will retry</span>
<span class="token comment">// throw: call_once will retry</span>
<span class="token comment">// Didn&#39;t throw, call_once will not attempt again</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h3 id="\u53F3\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u53F3\u503C\u5F15\u7528" aria-hidden="true">#</a> \u53F3\u503C\u5F15\u7528</h3><h4 id="\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u6982\u5FF5" aria-hidden="true">#</a> \u6982\u5FF5</h4><p>\u4E3A\u4E86\u5F04\u6E05\u4EC0\u4E48\u662F\u53F3\u503C\u5F15\u7528\uFF0C\u6211\u4EEC\u5148\u6765\u770B\u770B\u4EC0\u4E48\u662F\u5DE6\u503C\uFF0C\u4EC0\u4E48\u662F\u53F3\u503C\uFF0C\u4EC0\u4E48\u662F\u5F15\u7528\uFF1F</p><ol><li>\u5DE6\u503C\uFF1A\u80FD\u5BF9\u8868\u8FBE\u5F0F\u53D6\u5730\u5740\u3001\u6216\u5177\u540D\u5BF9\u8C61/\u53D8\u91CF\u3002\u4E00\u822C\u6307\u8868\u8FBE\u5F0F\u7ED3\u675F\u540E\u4F9D\u7136\u5B58\u5728\u7684\u6301\u4E45\u5BF9\u8C61\u3002</li><li>\u53F3\u503C\uFF1A\u4E0D\u80FD\u5BF9\u8868\u8FBE\u5F0F\u53D6\u5730\u5740\uFF0C\u6216\u533F\u540D\u5BF9\u8C61\u3002\u4E00\u822C\u6307\u8868\u8FBE\u5F0F\u7ED3\u675F\u5C31\u4E0D\u518D\u5B58\u5728\u7684\u4E34\u65F6\u5BF9\u8C61\u3002</li><li>\u5F15\u7528\uFF1A\u58F0\u660E\u5177\u540D\u53D8\u91CF\u4E3A\u5F15\u7528\uFF0C\u5373\u65E2\u5B58\u5BF9\u8C61\u6216\u51FD\u6570\u7684\u522B\u540D\u3002</li></ol><p>\u5DE6\u503C\u5F15\u7528\u53EF\u4EE5\u770B\u6210\u662F\u5DE6\u503C\u7684\u7684\u4E00\u4E2A\u522B\u540D\uFF0C\u8868\u793A\u4E3A <code>T&amp;</code>\u3002\u53F3\u503C\u5F15\u7528\u4E5F\u662F\u540C\u7406\uFF0C\u8868\u793A\u4E3A <code>T&amp;&amp;</code>\u3002</p><p>\u53F3\u503C\u5F15\u7528\u662F C++11 \u4E2D\u5F15\u5165\u7684\u65B0\u7279\u6027 , \u5B83\u5B9E\u73B0\u4E86\u8F6C\u79FB\u8BED\u4E49\u548C\u7CBE\u786E\u4F20\u9012\u3002\u5B83\u7684\u4E3B\u8981\u76EE\u7684\u6709\u4E24\u4E2A\u65B9\u9762\uFF1A</p><ol><li>\u6D88\u9664\u4E24\u4E2A\u5BF9\u8C61\u4EA4\u4E92\u65F6\u4E0D\u5FC5\u8981\u7684\u5BF9\u8C61\u62F7\u8D1D\uFF0C\u8282\u7701\u8FD0\u7B97\u5B58\u50A8\u8D44\u6E90\uFF0C\u63D0\u9AD8\u6548\u7387\u3002</li><li>\u80FD\u591F\u66F4\u7B80\u6D01\u660E\u786E\u5730\u5B9A\u4E49\u6CDB\u578B\u51FD\u6570\u3002</li></ol><p>\u53F3\u503C\u5F15\u7528\u53EF\u7528\u4E8E\u4E3A\u4E34\u65F6\u5BF9\u8C61\u5EF6\u957F\u751F\u5B58\u671F\uFF08\u6CE8\u610F\uFF0C\u5230 const \u7684\u5DE6\u503C\u5F15\u7528\u4E5F\u80FD\u5EF6\u957F\u4E34\u65F6\u5BF9\u8C61\u751F\u5B58\u671F\uFF0C\u4F46\u8FD9\u4E9B\u5BF9\u8C61\u65E0\u6CD5\u56E0\u6B64\u88AB\u4FEE\u6539\uFF09\u3002</p><h4 id="\u5C06\u4EA1\u503C" tabindex="-1"><a class="header-anchor" href="#\u5C06\u4EA1\u503C" aria-hidden="true">#</a> \u5C06\u4EA1\u503C</h4><p>C++\u4E2D\u6709\u201C\u5DE6\u503C\u201D\u3001\u201C\u53F3\u503C\u201D\u7684\u6982\u5FF5\uFF0CC++11\u4EE5\u540E\uFF0C\u53C8\u6709\u4E86\u201C\u5DE6\u503C\u201D\u3001\u201C\u7EAF\u53F3\u503C\u201D\u3001\u201C\u5C06\u4EA1\u503C\u201D\u7684\u6982\u5FF5\u3002</p><p>\u4E0B\u9762\u9009\u53D6\u82E5\u5E72\u5178\u578B\u8BE6\u7EC6\u8BF4\u660E\u5DE6\u503C\u548C\u7EAF\u53F3\u503C\u7684\u5224\u65AD\uFF1A</p><ol><li><p>++i\u662F\u5DE6\u503C\uFF0Ci++\u662F\u53F3\u503C</p><p>\u524D\u8005\uFF0C\u5BF9i\u52A01\u540E\u518D\u8D4B\u7ED9i\uFF0C\u6700\u7EC8\u7684\u8FD4\u56DE\u503C\u5C31\u662Fi\uFF0C\u6240\u4EE5\uFF0C++i\u7684\u7ED3\u679C\u662F\u5177\u540D\u7684\uFF0C\u540D\u5B57\u5C31\u662Fi\uFF1B\u800C\u5BF9\u4E8Ei++\u800C\u8A00\uFF0C\u662F\u5148\u5BF9i\u8FDB\u884C\u4E00\u6B21\u62F7\u8D1D\uFF0C\u5C06\u5F97\u5230\u7684\u526F\u672C\u4F5C\u4E3A\u8FD4\u56DE\u7ED3\u679C\uFF0C\u7136\u540E\u518D\u5BF9i\u52A01\uFF0C\u7531\u4E8Ei++\u7684\u7ED3\u679C\u662F\u5BF9i\u52A01\u524Di\u7684\u4E00\u4EFD\u62F7\u8D1D\uFF0C\u6240\u4EE5\u5B83\u662F\u4E0D\u5177\u540D\u7684\u3002\u5047\u8BBE\u81EA\u589E\u524Di\u7684\u503C\u662F6\uFF0C\u90A3\u4E48\uFF0C++i\u5F97\u5230\u7684\u7ED3\u679C\u662F7\uFF0C\u8FD9\u4E2A7\u6709\u4E2A\u540D\u5B57\uFF0C\u5C31\u662Fi\uFF1B\u800Ci++\u5F97\u5230\u7684\u7ED3\u679C\u662F6\uFF0C\u8FD9\u4E2A6\u662Fi\u52A01\u524D\u7684\u4E00\u4E2A\u526F\u672C\uFF0C\u5B83\u6CA1\u6709\u540D\u5B57\uFF0Ci\u4E0D\u662F\u5B83\u7684\u540D\u5B57\uFF0Ci\u7684\u503C\u6B64\u65F6\u4E5F\u662F7\u3002\u53EF\u89C1\uFF0C++i\u548Ci++\u90FD\u8FBE\u5230\u4E86\u4F7Fi\u52A01\u7684\u76EE\u7684\uFF0C\u4F46\u4E24\u4E2A\u8868\u8FBE\u5F0F\u7684\u7ED3\u679C\u4E0D\u540C\u3002</p></li><li><p>\u89E3\u5F15\u7528\u8868\u8FBE\u5F0F*p\u662F\u5DE6\u503C\uFF0C\u53D6\u5730\u5740\u8868\u8FBE\u5F0F&amp;a\u662F\u7EAF\u53F3\u503C</p><p>&amp;(<em>p)\u4E00\u5B9A\u662F\u6B63\u786E\u7684\uFF0C\u56E0\u4E3A</em>p\u5F97\u5230\u7684\u662Fp\u6307\u5411\u7684\u5B9E\u4F53\uFF0C&amp;(*p)\u5F97\u5230\u7684\u5C31\u662F\u8FD9\u4E00\u5B9E\u4F53\u7684\u5730\u5740\uFF0C\u6B63\u662Fp\u7684\u503C\u3002\u7531\u4E8E&amp;(<em>p)\u7684\u6B63\u786E\uFF0C\u6240\u4EE5</em>p\u662F\u5DE6\u503C\u3002\u800C\u5BF9&amp;a\u800C\u8A00\uFF0C\u5F97\u5230\u7684\u662Fa\u7684\u5730\u5740\uFF0C\u76F8\u5F53\u4E8Eunsigned int\u578B\u7684\u5B57\u9762\u503C\uFF0C\u6240\u4EE5\u662F\u7EAF\u53F3\u503C\u3002</p></li><li><p>a+b\u3001a&amp;&amp;b\u3001a==b\u90FD\u662F\u7EAF\u53F3\u503C</p><p>a+b\u5F97\u5230\u7684\u662F\u4E0D\u5177\u540D\u7684\u4E34\u65F6\u5BF9\u8C61\uFF0C\u800Ca&amp;&amp;b\u548Ca==b\u7684\u7ED3\u679C\u975Etrue\u5373false\uFF0C\u76F8\u5F53\u4E8E\u5B57\u9762\u503C\u3002</p></li></ol><p>\u5728C++11\u4E4B\u524D\u7684\u53F3\u503C\u548CC++11\u4E2D\u7684\u7EAF\u53F3\u503C\u662F\u7B49\u4EF7\u7684\u3002C++11\u4E2D\u7684\u5C06\u4EA1\u503C\u662F\u968F\u7740\u53F3\u503C\u5F15\u7528\u7684\u5F15\u5165\u800C\u65B0\u5F15\u5165\u7684\u3002\u6362\u8A00\u4E4B\uFF0C\u201C\u5C06\u4EA1\u503C\u201D\u6982\u5FF5\u7684\u4EA7\u751F\uFF0C\u662F\u7531\u53F3\u503C\u5F15\u7528\u7684\u4EA7\u751F\u800C\u5F15\u8D77\u7684\uFF0C\u5C06\u4EA1\u503C\u4E0E\u53F3\u503C\u5F15\u7528\u606F\u606F\u76F8\u5173\u3002\u6240\u8C13\u7684\u5C06\u4EA1\u503C\u8868\u8FBE\u5F0F\uFF0C\u5C31\u662F\u4E0B\u5217\u8868\u8FBE\u5F0F\uFF1A</p><ol><li>\u8FD4\u56DE\u53F3\u503C\u5F15\u7528\u7684\u51FD\u6570\u7684\u8C03\u7528\u8868\u8FBE\u5F0F</li><li>\u8F6C\u6362\u4E3A\u53F3\u503C\u5F15\u7528\u7684\u8F6C\u6362\u51FD\u6570\u7684\u8C03\u7528\u8868\u8FBE\u5F0F</li></ol><p>\u5728C++11\u4E2D\uFF0C\u6211\u4EEC\u7528\u5DE6\u503C\u53BB\u521D\u59CB\u5316\u4E00\u4E2A\u5BF9\u8C61\u6216\u4E3A\u4E00\u4E2A\u5DF2\u6709\u5BF9\u8C61\u8D4B\u503C\u65F6\uFF0C\u4F1A\u8C03\u7528\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u6216\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26\u6765\u62F7\u8D1D\u8D44\u6E90\uFF08\u6240\u8C13\u8D44\u6E90\uFF0C\u5C31\u662F\u6307new\u51FA\u6765\u7684\u4E1C\u897F\uFF09\uFF0C\u800C\u5F53\u6211\u4EEC\u7528\u4E00\u4E2A\u53F3\u503C\uFF08\u5305\u62EC\u7EAF\u53F3\u503C\u548C\u5C06\u4EA1\u503C\uFF09\u6765\u521D\u59CB\u5316\u6216\u8D4B\u503C\u65F6\uFF0C\u4F1A\u8C03\u7528\u79FB\u52A8\u6784\u9020\u51FD\u6570\u6216\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u6765\u79FB\u52A8\u8D44\u6E90\uFF0C\u4ECE\u800C\u907F\u514D\u62F7\u8D1D\uFF0C\u63D0\u9AD8\u6548\u7387\u3002\u5F53\u8BE5\u53F3\u503C\u5B8C\u6210\u521D\u59CB\u5316\u6216\u8D4B\u503C\u7684\u4EFB\u52A1\u65F6\uFF0C\u5B83\u7684\u8D44\u6E90\u5DF2\u7ECF\u79FB\u52A8\u7ED9\u4E86\u88AB\u521D\u59CB\u5316\u8005\u6216\u88AB\u8D4B\u503C\u8005\uFF0C\u540C\u65F6\u8BE5\u53F3\u503C\u4E5F\u5C06\u4F1A\u9A6C\u4E0A\u88AB\u9500\u6BC1\uFF08\u6790\u6784\uFF09\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5F53\u4E00\u4E2A\u53F3\u503C\u51C6\u5907\u5B8C\u6210\u521D\u59CB\u5316\u6216\u8D4B\u503C\u4EFB\u52A1\u65F6\uFF0C\u5B83\u5DF2\u7ECF\u201C\u5C06\u4EA1\u201D\u4E86\u3002\u800C\u4E0A\u97621\uFF09\u548C2\uFF09\u4E24\u79CD\u8868\u8FBE\u5F0F\u7684\u7ED3\u679C\u90FD\u662F\u4E0D\u5177\u540D\u7684\u53F3\u503C\u5F15\u7528\uFF0C\u5B83\u4EEC\u5C5E\u4E8E\u53F3\u503C\uFF08\u5173\u4E8E\u201C\u4E0D\u5177\u540D\u7684\u53F3\u503C\u5F15\u7528\u662F\u53F3\u503C\u201D\u8FD9\u4E00\u70B9\uFF0C\u540E\u9762\u8FD8\u4F1A\u8BE6\u7EC6\u89E3\u91CA\uFF09\u3002\u53C8\u56E0\u4E3A</p><ul><li>\u8FD9\u79CD\u53F3\u503C\u662F\u4E0EC++11\u65B0\u751F\u4E8B\u7269\u2014\u2014\u201C\u53F3\u503C\u5F15\u7528\u201D\u76F8\u5173\u7684\u201C\u65B0\u53F3\u503C\u201D</li><li>\u8FD9\u79CD\u53F3\u503C\u5E38\u7528\u6765\u5B8C\u6210\u79FB\u52A8\u6784\u9020\u6216\u79FB\u52A8\u8D4B\u503C\u7684\u7279\u6B8A\u4EFB\u52A1\uFF0C\u626E\u6F14\u7740\u201C\u5C06\u4EA1\u201D\u7684\u89D2\u8272</li></ul><p>\u6240\u4EE5C++11\u7ED9\u8FD9\u7C7B\u53F3\u503C\u8D77\u4E86\u4E00\u4E2A\u65B0\u7684\u540D\u5B57\u2014\u2014\u5C06\u4EA1\u503C\u3002</p><p>\u4E3E\u4F8B\uFF1Astd::move()\u3001static_cast&lt;X&amp;&amp;&gt;(x)\uFF08X\u662F\u81EA\u5B9A\u4E49\u7684\u7C7B\uFF0Cx\u662F\u7C7B\u5BF9\u8C61\uFF0C\u8FD9\u4E24\u4E2A\u51FD\u6570\u5E38\u7528\u6765\u5C06\u5DE6\u503C\u5F3A\u5236\u8F6C\u6362\u6210\u53F3\u503C\uFF0C\u4ECE\u800C\u4F7F\u62F7\u8D1D\u53D8\u6210\u79FB\u52A8\uFF0C\u63D0\u9AD8\u6548\u7387\uFF09</p><p>\u9644\u6CE8\uFF1A\u4E8B\u5B9E\u4E0A\uFF0C\u5C06\u4EA1\u503C\u4E0D\u8FC7\u662FC++11\u63D0\u51FA\u7684\u4E00\u5757\u6666\u6DA9\u7684\u8BED\u6CD5\u7CD6\u3002\u5B83\u4E0E\u7EAF\u53F3\u503C\u5728\u529F\u80FD\u4E0A\u53CA\u5176\u76F8\u4F3C\uFF0C\u5982\u90FD\u4E0D\u80FD\u505A\u64CD\u4F5C\u7B26\u7684\u5DE6\u64CD\u4F5C\u6570\uFF0C\u90FD\u53EF\u4EE5\u4F7F\u7528\u79FB\u52A8\u6784\u9020\u51FD\u6570\u548C\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u3002\u5F53\u4E00\u4E2A\u7EAF\u53F3\u503C\u6765\u5B8C\u6210\u79FB\u52A8\u6784\u9020\u6216\u79FB\u52A8\u8D4B\u503C\u4EFB\u52A1\u65F6\uFF0C\u5176\u5B9E\u5B83\u4E5F\u5177\u6709\u201C\u5C06\u4EA1\u201D\u7684\u7279\u70B9\u3002\u4E00\u822C\u6211\u4EEC\u4E0D\u5FC5\u523B\u610F\u533A\u5206\u4E00\u4E2A\u53F3\u503C\u5230\u5E95\u662F\u7EAF\u53F3\u503C\u8FD8\u662F\u5C06\u4EA1\u503C\u3002</p>`,110),y=n("\u8FD9\u8282\u5185\u5BB9\u53C2\u8003\u94FE\u63A5\uFF1A"),_={href:"https://www.cnblogs.com/zpcdbky/p/5275959.html",target:"_blank",rel:"noopener noreferrer"},w=n("\u8BDD\u8BF4C++\u4E2D\u7684\u5DE6\u503C\u3001\u7EAF\u53F3\u503C\u3001\u5C06\u4EA1\u503C"),v=t(`<h4 id="\u5F15\u7528\u7279\u70B9" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u7279\u70B9" aria-hidden="true">#</a> \u5F15\u7528\u7279\u70B9</h4><p>\u5F15\u7528\u5FC5\u987B\u88AB\u521D\u59CB\u5316\u4E3A\u6307\u4EE3\u4E00\u4E2A\u6709\u6548\u7684\u5BF9\u8C61\u6216\u51FD\u6570\uFF0C\u4E0D\u7BA1\u5DE6\u503C\u5F15\u7528\u8FD8\u662F\u53F3\u503C\u5F15\u7528\u4E5F\u4E00\u6837\u3002</p><p>\u4E0D\u5B58\u5728 <code>void</code> \u7684\u5F15\u7528\uFF0C\u4E5F\u4E0D\u5B58\u5728\u5F15\u7528\u7684\u5F15\u7528\u3002</p><p>\u5F15\u7528\u4E0D\u662F\u5BF9\u8C61\uFF1B\u5B83\u4EEC\u4E0D\u5FC5\u5360\u7528\u5B58\u50A8\uFF0C\u5C3D\u7BA1\u7F16\u8BD1\u5668\u4F1A\u5728\u9700\u8981\u5B9E\u73B0\u6240\u9700\u8BED\u4E49\uFF08\u4F8B\u5982\uFF0C\u5F15\u7528\u7C7B\u578B\u7684\u975E\u9759\u6001\u6570\u636E\u6210\u5458\u901A\u5E38\u4F1A\u589E\u52A0\u7C7B\u7684\u5927\u5C0F\uFF0C\u91CF\u4E3A\u5B58\u50A8\u5185\u5B58\u5730\u5740\u6240\u9700\uFF09\u7684\u60C5\u51B5\u4E0B\u5206\u914D\u5B58\u50A8\u3002</p><p>\u56E0\u4E3A\u5F15\u7528\u4E0D\u662F\u5BF9\u8C61\uFF0C\u6240\u4EE5\u4E0D\u5B58\u5728\u5F15\u7528\u7684\u6570\u7EC4\uFF0C\u4E0D\u5B58\u5728\u6307\u5411\u5F15\u7528\u7684\u6307\u9488\uFF0C\u4E0D\u5B58\u5728\u5F15\u7528\u7684\u5F15\u7528\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u9519\u8BEF</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">*</span> p<span class="token punctuation">;</span>   <span class="token comment">// \u9519\u8BEF</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token operator">&amp;</span>r<span class="token punctuation">;</span>   <span class="token comment">// \u9519\u8BEF</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="\u5F15\u7528\u6298\u53E0" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u6298\u53E0" aria-hidden="true">#</a> \u5F15\u7528\u6298\u53E0</h4><p>\u901A\u8FC7\u6A21\u677F\u6216 typedef \u4E2D\u7684\u7C7B\u578B\u64CD\u4F5C\u53EF\u4EE5\u6784\u6210\u5F15\u7528\u7684\u5F15\u7528\uFF0C\u6B64\u65F6\u9002\u7528\u5F15\u7528\u6298\u53E0\uFF08reference collapsing\uFF09\u89C4\u5219\uFF1A<strong>\u53F3\u503C\u5F15\u7528\u7684\u53F3\u503C\u5F15\u7528\u6298\u53E0\u6210\u53F3\u503C\u5F15\u7528\uFF0C\u6240\u6709\u5176\u4ED6\u7EC4\u5408\u5747\u6298\u53E0\u6210\u5DE6\u503C\u5F15\u7528</strong>\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>  lref<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> rref<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
lref<span class="token operator">&amp;</span>  r1 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r1 \u7684\u7C7B\u578B\u662F int&amp;</span>
lref<span class="token operator">&amp;&amp;</span> r2 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r2 \u7684\u7C7B\u578B\u662F int&amp;</span>
rref<span class="token operator">&amp;</span>  r3 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r3 \u7684\u7C7B\u578B\u662F int&amp;</span>
rref<span class="token operator">&amp;&amp;</span> r4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// r4 \u7684\u7C7B\u578B\u662F int&amp;&amp;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="\u8F6C\u53D1\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u53D1\u5F15\u7528" aria-hidden="true">#</a> \u8F6C\u53D1\u5F15\u7528</h4><p>\u8F6C\u53D1\u5F15\u7528\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u5F15\u7528\uFF0C\u5B83\u4FDD\u6301\u51FD\u6570\u5B9E\u53C2\u7684\u503C\u7C7B\u522B\uFF0C\u4F7F\u5F97 <code>std::forward</code> \u80FD\u7528\u6765\u8F6C\u53D1\u5B9E\u53C2\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// x \u662F\u8F6C\u53D1\u5F15\u7528</span>
    <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u800C\u80FD\u88AB\u8F6C\u53D1</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5B9E\u53C2\u662F\u5DE6\u503C\uFF0C\u8C03\u7528 f&lt;int&amp;&gt;(int&amp;), std::forward&lt;int&amp;&gt;(x) \u662F\u5DE6\u503C</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5B9E\u53C2\u662F\u53F3\u503C\uFF0C\u8C03\u7528 f&lt;int&gt;(int&amp;&amp;), std::forward&lt;int&gt;(x) \u662F\u53F3\u503C</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x \u4E0D\u662F\u8F6C\u53D1\u5F15\u7528\uFF1Aconst T \u4E0D\u662F\u65E0 cv \u9650\u5B9A\u7684</span>
 
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span>
    <span class="token function">A</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">,</span> U<span class="token operator">&amp;&amp;</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x \u4E0D\u662F\u8F6C\u53D1\u5F15\u7528\uFF1AT \u4E0D\u662F\u6784\u9020\u51FD\u6570\u7684\u7C7B\u578B\u6A21\u677F\u5F62\u53C2</span>
                             <span class="token comment">// \u4F46 y \u662F\u8F6C\u53D1\u5F15\u7528</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> vec <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// foo() \u53EF\u4EE5\u662F\u5DE6\u503C\u6216\u53F3\u503C\uFF0Cvec \u662F\u8F6C\u53D1\u5F15\u7528</span>
<span class="token keyword">auto</span> i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E5F\u53EF\u4EE5</span>
<span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                   <span class="token comment">// \u4E5F\u53EF\u4EE5</span>
<span class="token function">g</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F6C\u53D1\uFF0C\u4FDD\u6301\u503C\u7C7B\u522B</span>
 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> x<span class="token operator">:</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// x \u662F\u8F6C\u53D1\u5F15\u7528\uFF1B\u8FD9\u662F\u4F7F\u7528\u8303\u56F4 for \u5FAA\u73AF\u6700\u5B89\u5168\u7684\u65B9\u5F0F</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> z <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// *\u4E0D\u662F*\u8F6C\u53D1\u5F15\u7528\uFF08\u521D\u59CB\u5316\u5668\u5217\u8868\u7684\u7279\u6B8A\u60C5\u5F62\uFF09</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="\u60AC\u5782\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u60AC\u5782\u5F15\u7528" aria-hidden="true">#</a> \u60AC\u5782\u5F15\u7528</h4><p>\u5C3D\u7BA1\u5F15\u7528\u4E00\u65E6\u521D\u59CB\u5316\u5C31\u59CB\u7EC8\u6307\u4EE3\u4E00\u4E2A\u6709\u6548\u7684\u5BF9\u8C61\u6216\u51FD\u6570\uFF0C\u4F46\u6709\u53EF\u80FD\u521B\u5EFA\u4E00\u4E2A\u7A0B\u5E8F\uFF0C\u5176\u4E2D\u88AB\u6307\u4EE3\u5BF9\u8C61\u7684\u751F\u5B58\u671F\u7ED3\u675F\u800C\u5F15\u7528\u4ECD\u4FDD\u6301\u53EF\u8BBF\u95EE\uFF08\u60AC\u5782\uFF08dangling\uFF09\uFF09\u3002\u8BBF\u95EE\u8FD9\u79CD\u5F15\u7528\u662F\u672A\u5B9A\u4E49\u884C\u4E3A\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">&quot;Example&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span> <span class="token comment">// \u9000\u51FA s \u7684\u4F5C\u7528\u57DF\uFF1A\u8C03\u7528\u5176\u6790\u6784\u51FD\u6570\u5E76\u89E3\u5206\u914D\u5176\u5B58\u50A8</span>
<span class="token punctuation">}</span>
 
std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u60AC\u5782\u5F15\u7528</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">;</span>       <span class="token comment">// \u672A\u5B9A\u4E49\u884C\u4E3A\uFF1A\u4ECE\u60AC\u5782\u5F15\u7528\u8BFB\u53D6</span>
std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u672A\u5B9A\u4E49\u884C\u4E3A\uFF1A\u4ECE\u60AC\u5782\u5F15\u7528\u590D\u5236\u521D\u59CB\u5316</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="\u79FB\u52A8\u6784\u9020\u51FD\u6570-\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u6784\u9020\u51FD\u6570-\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u79FB\u52A8\u6784\u9020\u51FD\u6570/\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26</h3><h4 id="\u79FB\u52A8\u6784\u9020\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u6784\u9020\u51FD\u6570" aria-hidden="true">#</a> \u79FB\u52A8\u6784\u9020\u51FD\u6570</h4><p>\u7C7B T \u7684\u79FB\u52A8\u6784\u9020\u51FD\u6570\u662F\u975E\u6A21\u677F\u6784\u9020\u51FD\u6570\uFF0C\u5176\u9996\u4E2A\u5F62\u53C2\u662F T&amp;&amp;\u3001const T&amp;&amp;\u3001volatile T&amp;&amp; \u6216 const volatile T&amp;&amp;\uFF0C\u4E14\u65E0\u5176\u4ED6\u5F62\u53C2\uFF0C\u6216\u5269\u4F59\u5F62\u53C2\u5747\u6709\u9ED8\u8BA4\u503C\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>\u7C7B\u540D <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
\u7C7B\u540D <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
\u7C7B\u540D <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5178\u578B\u7684\u79FB\u52A8\u6784\u9020\u51FD\u6570\u201C\u7A83\u53D6\u201D\u5B9E\u53C2\u66FE\u4FDD\u6709\u7684\u8D44\u6E90\uFF08\u4F8B\u5982\u6307\u5411\u52A8\u6001\u5206\u914D\u5BF9\u8C61\u7684\u6307\u9488\uFF0C\u6587\u4EF6\u63CF\u8FF0\u7B26\uFF0CTCP socket\uFF0CI/O \u6D41\uFF0C\u8FD0\u884C\u7684\u7EBF\u7A0B\uFF0C\u7B49\u7B49\uFF09\uFF0C\u800C\u975E\u590D\u5236\u5B83\u4EEC\uFF0C\u5E76\u4F7F\u5176\u5B9E\u53C2\u9057\u7559\u4E8E\u67D0\u4E2A\u5408\u6CD5\u4F46\u4E0D\u786E\u5B9A\u7684\u72B6\u6001\u3002\u4F8B\u5982\uFF0C\u4ECE std::string \u6216\u4ECE std::vector \u79FB\u52A8\u53EF\u4EE5\u5BFC\u81F4\u5B9E\u53C2\u88AB\u7F6E\u4E3A\u7A7A\u3002\u4F46\u662F\u4E0D\u5E94\u4F9D\u8D56\u6B64\u884C\u4E3A\u3002\u5BF9\u4E8E\u67D0\u4E9B\u7C7B\u578B\uFF0C\u4F8B\u5982 std::unique_ptr\uFF0C\u79FB\u52A8\u540E\u7684\u72B6\u6001\u662F\u5B8C\u5168\u6307\u5B9A\u7684\u3002</p><h4 id="\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26</h4><p>\u7C7B T \u7684\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u662F\u540D\u4E3A operator=\u7684\u975E\u6A21\u677F\u975E\u9759\u6001\u6210\u5458\u51FD\u6570\uFF0C\u5B83\u63A5\u53D7\u6070\u597D\u4E00\u4E2A T&amp;&amp;\u3001const T&amp;&amp;\u3001volatile T&amp;&amp; \u6216 const volatile T&amp;&amp; \u7C7B\u578B\u7684\u5F62\u53C2\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>\u7C7B\u540D <span class="token operator">&amp;</span> \u7C7B\u540D <span class="token double-colon punctuation">::</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span>
\u7C7B\u540D <span class="token operator">&amp;</span> \u7C7B\u540D <span class="token double-colon punctuation">::</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
\u7C7B\u540D <span class="token operator">&amp;</span> \u7C7B\u540D <span class="token double-colon punctuation">::</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span> \u7C7B\u540D <span class="token operator">&amp;&amp;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5178\u578B\u7684\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u201C\u7A83\u53D6\u201D\u5B9E\u53C2\u66FE\u4FDD\u6709\u7684\u8D44\u6E90\uFF08\u4F8B\u5982\u6307\u5411\u52A8\u6001\u5206\u914D\u5BF9\u8C61\u7684\u6307\u9488\uFF0C\u6587\u4EF6\u63CF\u8FF0\u7B26\uFF0CTCP socket\uFF0CI/O \u6D41\uFF0C\u8FD0\u884C\u7684\u7EBF\u7A0B\uFF0C\u7B49\u7B49\uFF09\uFF0C\u800C\u975E\u590D\u5236\u5B83\u4EEC\uFF0C\u5E76\u4F7F\u5F97\u5B9E\u53C2\u9057\u7559\u4E8E\u67D0\u4E2A\u5408\u6CD5\u4F46\u4E0D\u786E\u5B9A\u7684\u72B6\u6001\u3002\u4F8B\u5982\uFF0C\u4ECE std::string \u6216\u4ECE std::vector \u79FB\u52A8\u8D4B\u503C\u53EF\u80FD\u5BFC\u81F4\u5B9E\u53C2\u88AB\u7F6E\u7A7A\u3002\u7136\u800C\u8FD9\u5E76\u4E0D\u4FDD\u8BC1\u4F1A\u53D1\u751F\u3002\u79FB\u52A8\u8D4B\u503C\u4E0E\u666E\u901A\u8D4B\u503C\u76F8\u6BD4\uFF0C\u5176\u5B9A\u4E49\u8F83\u4E3A\u5BBD\u677E\u800C\u975E\u66F4\u4E25\u683C\uFF1B\u5728\u5B8C\u6210\u65F6\uFF0C\u666E\u901A\u8D4B\u503C\u5FC5\u987B\u7559\u4E0B\u6570\u636E\u7684\u4E24\u4EFD\u526F\u672C\uFF0C\u800C\u79FB\u52A8\u8D4B\u503C\u53EA\u8981\u6C42\u7559\u4E0B\u4E00\u4EFD\u3002</p><h3 id="std-move-std-forward" tabindex="-1"><a class="header-anchor" href="#std-move-std-forward" aria-hidden="true">#</a> std::move/std::forward</h3><h4 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> move</h4><p>std::move \u7528\u4E8E\u6307\u793A\u5BF9\u8C61 t \u53EF\u4EE5\u201C\u88AB\u79FB\u52A8\u201D\uFF0C\u5373\u5141\u8BB8\u4ECE t \u5230\u53E6\u4E00\u5BF9\u8C61\u7684\u6709\u6548\u7387\u7684\u8D44\u6E90\u4F20\u9012\u3002</p><p>\u7279\u522B\u662F\uFF0Cstd::move \u751F\u6210\u6807\u8BC6\u5176\u53C2\u6570 t \u7684\u4EA1\u503C\u8868\u8FBE\u5F0F\u3002\u5B83\u51C6\u786E\u5730\u7B49\u4EF7\u4E8E\u5230\u53F3\u503C\u5F15\u7528\u7C7B\u578B\u7684 static_cast \u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// move \u6E90\u7801</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
<span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span>
<span class="token function">move</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> _NOEXCEPT
<span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> _LIBCPP_NODEBUG_TYPE <span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type _Up<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Up<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4F18\u5316\u4E00\u4E0B\u5C31\u662F</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type <span class="token operator">&amp;&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u53EF\u4EE5\u770B\u5230\uFF0C move \u51FD\u6570\u5176\u5B9E\u5C31\u662F\u9700\u8981\u8FD4\u56DE\u4E00\u4E2A\u53F3\u503C\u5F15\u7528\uFF0C\u800C\u4E0D\u7BA1\u4F20\u5165\u7684\u662F\u5DE6\u503C\u5F15\u7528\u8FD8\u662F\u53F3\u503C\u5F15\u7528</span>
    <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type <span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="forward" tabindex="-1"><a class="header-anchor" href="#forward" aria-hidden="true">#</a> forward</h4><p>\u9996\u5148\u9700\u8981\u77E5\u9053\u4E00\u4E2A\u5F88\u91CD\u8981\u7684\u70B9\uFF0C\u53F3\u503C\u5F15\u7528\u4F5C\u4E3A\u51FD\u6570\u53C2\u6570\u65F6\uFF0C\u5728\u51FD\u6570\u5185\u90E8\u5B83\u672C\u8EAB\u5C31\u662F\u4E00\u4E2A\u4F5C\u4E3A\u4E00\u4E2A\u5DE6\u503C\uFF0C\u770B\u4E0B\u9762\u7684\u4EE3\u7801\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> ra <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span>ra<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: an rvalue reference cannot be bound to an lvalue</span>

<span class="token comment">// \u518D\u6BD4\u5982\u51FD\u6570\u8C03\u7528</span>
<span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: an rvalue reference cannot be bound to an lvalue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>std::forward \u7684\u4F5C\u7528\u5C31\u662F\u89E3\u51B3\u4E0A\u9762\u7684\u95EE\u9898\uFF0C\u8FDB\u884C\u5B8C\u7F8E\u8F6C\u53D1\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// forward \u6E90\u7801</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
_Tp<span class="token operator">&amp;&amp;</span>
<span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span> _NOEXCEPT
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
_Tp<span class="token operator">&amp;&amp;</span>
<span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> _NOEXCEPT
<span class="token punctuation">{</span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span>is_lvalue_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                  <span class="token string">&quot;can not forward an rvalue as an lvalue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>std::move\u662F\u4E00\u4E2A\u7528\u4E8E\u63D0\u793A\u4F18\u5316\u7684\u51FD\u6570\uFF0Cstd::forward\u662F\u7528\u4E8E\u6A21\u677F\u7F16\u7A0B\u4E2D\u7684\uFF0C\u5982\u679C\u4E0D\u9700\u8981\u7F16\u5199\u901A\u7528\u7684\u6A21\u677F\u7C7B\u548C\u51FD\u6570\uFF0C\u53EF\u80FD\u4E0D\u600E\u4E48\u7528\u7684\u4E0A\u5B83\u3002</p><p>\u4E00\u822C std::forward \u7684\u7528\u6CD5\u4E3A\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// arg \u59CB\u7EC8\u662F\u5DE6\u503C</span>
    <span class="token function">foo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F6C\u53D1\u4E3A\u5DE6\u503C\u6216\u53F3\u503C\uFF0C\u4F9D\u8D56\u4E8E T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u518D\u6765\uFF0C\u8BA8\u8BBA\u4E00\u4E0B\uFF0C\u4E00\u4E2A\u6A21\u677F\u51FD\u6570\u5982\u679C\u8981\u4FDD\u7559\u53C2\u6570\u7684\u5DE6\u53F3\u503C\u5F15\u7528\u6027\uFF0C\u4E3A\u4EC0\u4E48\u5E94\u8BE5\u58F0\u660E\u4E3AT&amp;&amp;\uFF1A</p><ol><li>\u5982\u679C\u58F0\u660E\u51FD\u6570f(T t): \u5B9E\u53C2\u4F1A\u76F4\u63A5\u8FDB\u884C\u503C\u4F20\u9012\uFF0C\u5931\u53BB\u4E86\u5F15\u7528\u6027\u3002</li><li>\u5982\u679C\u58F0\u660E\u51FD\u6570f(T &amp;t): \u6839\u636E\u5F15\u7528\u6298\u53E0\u6CD5\u5219\uFF0C\u65E0\u8BBAT\u662FU&amp;\u8FD8\u662FU&amp;&amp;\uFF0CT&amp;\u7684\u6298\u53E0\u7ED3\u679C\u90FD\u53EA\u4F1A\u662FU&amp;\uFF0C\u5373\uFF0C\u8FD9\u4E2A\u58F0\u660E\u4E0D\u80FD\u7528\u4E8E\u5339\u914D\u53F3\u503C\u5F15\u7528\u5B9E\u53C2\u3002</li><li>\u5982\u679C\u58F0\u660E\u51FD\u6570f(T &amp;&amp;t): \u5982\u679CT\u4E3AU&amp;\uFF0CT&amp;&amp;\u7684\u7ED3\u679C\u662FU&amp;\uFF0C\u53EF\u4EE5\u5339\u914D\u5DE6\u503C\u5B9E\u53C2\uFF1B\u5982\u679CT\u4E3AU&amp;&amp;\uFF0CT&amp;&amp;\u7684\u7ED3\u679C \u662FU&amp;&amp;\uFF0C\u53EF\u4EE5\u5339\u914D\u53F3\u503C\u5B9E\u53C2\u3002\u53C8\u56E0\u4E3AT\u7684cv\u6027\u548CU\u76F8\u540C\uFF0C\u6240\u4EE5\u8FD9\u79CD\u58F0\u660E\u80FD\u591F\u4FDD\u7559\u5B9E\u53C2\u7684\u7C7B\u578B\u4FE1\u606F\u3002</li></ol><h4 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h4><ol><li>std::move\u6267\u884C\u5230\u53F3\u503C\u7684\u65E0\u6761\u4EF6\u8F6C\u6362\u3002\u5C31\u5176\u672C\u8EAB\u800C\u8A00\uFF0C\u5B83\u6CA1\u6709move\u4EFB\u4F55\u4E1C\u897F\u3002</li><li>std::forward\u53EA\u6709\u5728\u5B83\u7684\u53C2\u6570\u7ED1\u5B9A\u5230\u4E00\u4E2A\u53F3\u503C\u4E0A\u7684\u65F6\u5019\uFF0C\u5B83\u624D\u8F6C\u6362\u5B83\u7684\u53C2\u6570\u5230\u4E00\u4E2A\u53F3\u503C\u3002</li><li>std::move\u548Cstd::forward\u53EA\u4E0D\u8FC7\u5C31\u662F\u6267\u884C\u7C7B\u578B\u8F6C\u6362\u7684\u4E24\u4E2A\u51FD\u6570\uFF1Bstd::move\u6CA1\u6709move\u4EFB\u4F55\u4E1C\u897F\uFF0Cstd::forward\u6CA1\u6709\u8F6C\u53D1\u4EFB\u4F55\u4E1C\u897F\u3002\u5728\u8FD0\u884C\u671F\uFF0C\u5B83\u4EEC\u6CA1\u6709\u505A\u4EFB\u4F55\u4E8B\u60C5\u3002\u5B83\u4EEC\u6CA1\u6709\u4EA7\u751F\u9700\u8981\u6267\u884C\u7684\u4EE3\u7801\uFF0C\u4E00byte\u90FD\u6CA1\u6709\u3002</li><li>std::forward&lt;\\T&gt;() \u4E0D\u4EC5\u53EF\u4EE5\u4FDD\u6301\u5DE6\u503C\u6216\u8005\u53F3\u503C\u4E0D\u53D8\uFF0C\u540C\u65F6\u8FD8\u53EF\u4EE5\u4FDD\u6301const\u3001Lreference\u3001Rreference\u3001volatile\u7B49\u5C5E\u6027\u4E0D\u53D8\uFF1B</li></ol><p>\u6CE8\u610F\uFF0C\u5728\u4F7F\u7528 std::move \u65F6\uFF0C\u4F60\u53EA\u9700\u5411\u5B83\u4F20\u9012\u4E00\u4E2A\u53C2\u6570\uFF08rhs.s\uFF09\u5373\u53EF\uFF0C\u800C std::forward \u8FD8\u9700\u8981\u6307\u5B9A\u4E00\u4E2A\u6A21\u677F\u53C2\u6570\uFF08 std::string \uFF09\uFF0C\u4F60\u4E0D\u9700\u8981\u4E3A\u5B83\uFF08\u6A21\u677F\u53C2\u6570\uFF09\u6307\u5B9A\u5F15\u7528\u7C7B\u578B\uFF0C\u56E0\u4E3A\u8FD9\uFF08\u5B83\u662F\u4E00\u4E2A\u53F3\u503C\uFF09\u5DF2\u7ECF\u662F\u7EA6\u5B9A\u4FD7\u6210\u7684\u4E1C\u897F\u4E86\u3002\u56E0\u6B64\u4F7F\u7528 std::move \u6BD4 std::forward \u66F4\u65B9\u4FBF\uFF0C\u8FD8\u80FD\u907F\u514D\u9519\u8BEF\u7684\u7C7B\u578B\u53C2\u6570\u5BFC\u81F4\u7684\u884C\u4E3A\u5F02\u5E38\uFF08\u4F8B\u5982\uFF1A\u4F20\u5165 std::string&amp; \u5C06\u5BFC\u81F4\u6210\u5458\u53D8\u91CF s \u88AB\u62F7\u8D1D\u6784\u9020\uFF0C\u800C\u4E0D\u662F\u79FB\u52A8\u6784\u9020\uFF09\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>
 
<span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue overload, n=&quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue overload, n=&quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T3</span><span class="token operator">&gt;</span>
    <span class="token function">B</span><span class="token punctuation">(</span>T1<span class="token operator">&amp;&amp;</span> t1<span class="token punctuation">,</span> T2<span class="token operator">&amp;&amp;</span> t2<span class="token punctuation">,</span> T3<span class="token operator">&amp;&amp;</span> t3<span class="token punctuation">)</span> <span class="token operator">:</span>
        a1_<span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T1<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        a2_<span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T2<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        a3_<span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T3<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
<span class="token keyword">private</span><span class="token operator">:</span>
    A a1_<span class="token punctuation">,</span> a2_<span class="token punctuation">,</span> a3_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">make_unique1</span><span class="token punctuation">(</span>U<span class="token operator">&amp;&amp;</span> u<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">unique_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return std::unique_ptr&lt;T&gt;(new T(std::move(u)));</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> U<span class="token operator">&gt;</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">make_unique2</span><span class="token punctuation">(</span>U<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> u<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">unique_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return std::unique_ptr&lt;T&gt;(new T(std::move(u)...));</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>   
    <span class="token keyword">auto</span> p1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique1</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53F3\u503C</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> p2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique1</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5DE6\u503C</span>
 
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;B\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> t <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique2</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="explicit" tabindex="-1"><a class="header-anchor" href="#explicit" aria-hidden="true">#</a> explicit</h3><p>explicit\u7528\u6765\u9632\u6B62\u7531\u6784\u9020\u51FD\u6570\u5B9A\u4E49\u7684\u9690\u5F0F\u8F6C\u6362\u3002</p><p>\u8FD9\u4E2A\u5173\u952E\u5B57\u53EA\u80FD\u7528\u5728\u7C7B\u6784\u9020\u51FD\u6570\u3002\u5B83\u7684\u4F5C\u7528\u662F\u4E0D\u80FD\u8FDB\u884C\u9690\u5F0F\u8F6C\u6362\u3002</p><p>\u8981\u660E\u767D\u5B83\u7684\u4F5C\u7528\uFF0C\u9996\u5148\u8981\u4E86\u89E3\u9690\u5F0F\u8F6C\u6362\uFF1A\u53EF\u4EE5\u7528\u5355\u4E2A\u5B9E\u53C2\u6765\u8C03\u7528\u7684\u6784\u9020\u51FD\u6570\u5B9A\u4E49\u4E86\u4ECE\u5F62\u53C2\u7C7B\u578B\u5230\u8BE5\u7C7B\u7C7B\u578B\u7684\u4E00\u4E2A\u9690\u5F0F\u8F6C\u6362\u3002</p><p>\u4F8B\u5982:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">things</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">things</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token keyword">const</span> things <span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string m_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u91CCthings\u7684\u6784\u9020\u51FD\u6570\u53EF\u4EE5\u53EA\u7528\u4E00\u4E2A\u5B9E\u53C2\u5B8C\u6210\u521D\u59CB\u5316\u3002\u6240\u4EE5\u53EF\u4EE5\u8FDB\u884C\u4E00\u4E2A\u9690\u5F0F\u8F6C\u6362\uFF0C\u50CF\u4E0B\u9762\u8FD9\u6837\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>things a<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//\u5728\u8FD9\u91CC\u88AB\u521D\u59CB\u5316\u5E76\u4F7F\u7528\u3002</span>
std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span><span class="token string">&quot;book_1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//\u7531\u4E8E\u53EF\u4EE5\u9690\u5F0F\u8F6C\u6362\uFF0C\u6240\u4EE5\u53EF\u4EE5\u4E0B\u9762\u8FD9\u6837\u4F7F\u7528</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u6BB5\u7A0B\u5E8F\u4F7F\u7528\u4E00\u4E2Astring\u7C7B\u578B\u5BF9\u8C61\u4F5C\u4E3A\u5B9E\u53C2\u4F20\u7ED9things\u7684CompareTo\u51FD\u6570\u3002\u8FD9\u4E2A\u51FD\u6570\u672C\u6765\u662F\u9700\u8981\u4E00\u4E2Atings\u5BF9\u8C61\u4F5C\u4E3A\u5B9E\u53C2\u3002\u73B0\u5728\u7F16\u8BD1\u5668\u4F7F\u7528string str\u6765\u6784\u9020\u5E76\u521D\u59CB\u5316\u4E00\u4E2A things\u5BF9\u8C61\uFF0C\u65B0\u751F\u6210\u7684\u4E34\u65F6\u7684things\u5BF9\u8C61\u88AB\u4F20\u9012\u7ED9CompareTo\u51FD\u6570\uFF0C\u5E76\u5728\u79BB\u5F00\u8FD9\u6BB5\u51FD\u6570\u540E\u88AB\u6790\u6784\u3002</p><p>\u8FD9\u79CD\u884C\u4E3A\u7684\u6B63\u786E\u4E0E\u5426\u53D6\u51B3\u4E8E\u4E1A\u52A1\u9700\u8981\u3002\u5047\u5982\u4F60\u53EA\u662F\u60F3\u6D4B\u8BD5\u4E00\u4E0Ba\u7684\u91CD\u91CF\u4E0E10\u7684\u5927\u5C0F\u4E4B\u6BD4\uFF0C\u8FD9\u4E48\u505A\u4E5F\u8BB8\u662F\u65B9\u4FBF\u7684\u3002\u4F46\u662F\u5047\u5982\u5728CompareTo\u51FD\u6570\u4E2D\u8FD8\u6D89\u53CA\u5230\u4E86\u8981\u9664\u4EE5\u521D\u59CB\u5316\u4E3A0\u7684height\u5C5E\u6027\uFF0C\u90A3\u4E48\u8FD9\u4E48\u505A\u53EF\u80FD\u5C31\u662F\u9519\u8BEF\u7684\u3002\u9700\u8981\u5728\u6784\u9020tings\u4E4B\u540E\u66F4\u6539height\u5C5E\u6027\u4E0D\u4E3A0\u3002\u6240\u4EE5\u8981\u9650\u5236\u8FD9\u79CD\u9690\u5F0F\u7C7B\u578B\u8F6C\u6362\u3002</p><p>\u90A3\u4E48\u8FD9\u65F6\u5019\u5C31\u53EF\u4EE5\u901A\u8FC7\u5C06\u6784\u9020\u51FD\u6570\u58F0\u660E\u4E3Aexplicit\uFF0C\u6765\u9632\u6B62\u9690\u5F0F\u7C7B\u578B\u8F6C\u6362\u3002</p><p>explicit\u5173\u952E\u5B57\u53EA\u80FD\u7528\u4E8E\u7C7B\u5185\u90E8\u7684\u6784\u9020\u51FD\u6570\u58F0\u660E\u4E0A\uFF0C\u800C\u4E0D\u80FD\u7528\u5728\u7C7B\u5916\u90E8\u7684\u51FD\u6570\u5B9A\u4E49\u4E0A\u3002\u73B0\u5728things\u7C7B\u50CF\u8FD9\u6837\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">things</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">things</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span>name <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token keyword">const</span> things <span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string m_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u65F6\u4F60\u4ECD\u7136\u53EF\u4EE5\u901A\u8FC7\u663E\u793A\u4F7F\u7528\u6784\u9020\u51FD\u6570\u5B8C\u6210\u4E0A\u9762\u7684\u7C7B\u578B\u8F6C\u6362\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>things a<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//\u5728\u8FD9\u91CC\u88AB\u521D\u59CB\u5316\u5E76\u4F7F\u7528\u3002</span>
std<span class="token double-colon punctuation">::</span>string nm <span class="token operator">=</span><span class="token string">&quot;book_1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//\u663E\u793A\u4F7F\u7528\u6784\u9020\u51FD\u6570</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token function">things</span><span class="token punctuation">(</span>nm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="\u51FD\u6570-default-delete" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570-default-delete" aria-hidden="true">#</a> \u51FD\u6570 = default/delete</h3><p>\u5982\u679C\u7C7B\u5DF2\u7ECF\u5B9A\u4E49\u4E86\u6709\u53C2\u6570\u7684\u6784\u9020\u51FD\u6570\uFF0C\u9ED8\u8BA4\u7F16\u8BD1\u5668\u662F\u4E0D\u4F1A\u518D\u81EA\u52A8\u751F\u6210\u9ED8\u8BA4\u6784\u9020\u51FD\u6570\uFF0C\u901A\u8FC7 = default \u53EF\u4EE5\u8BA9\u7F16\u8BD1\u5668\u5E2E\u4F60\u81EA\u52A8\u751F\u6210\u9ED8\u8BA4\u6784\u9020\u51FD\u6570\u3002</p><p>\u5982\u679C\u4F60\u4E0D\u9700\u8981\u67D0\u4E2A\u51FD\u6570\uFF0C\u53EA\u8981\u5728\u51FD\u6570\u540E\u9762 = delete \u5373\u53EF\uFF0C\u7F16\u8BD1\u5373\u4F1A\u7981\u6B62\u8BE5\u51FD\u6570\u4EE3\u8868\u7684\u884C\u4E3A\uFF0C\u5982\u8D4B\u503C\u7B49\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="long-long-char16-t-char32-t" tabindex="-1"><a class="header-anchor" href="#long-long-char16-t-char32-t" aria-hidden="true">#</a> long long/char16_t/char32_t</h3><p><code>long long</code> - \u76EE\u6807\u7C7B\u578B\u5C06\u6709\u81F3\u5C11 64 \u4F4D\u7684\u5BBD\u5EA6\u3002</p><p><code>char16_t</code> - UTF-16 \u5B57\u7B26\u8868\u793A\u7684\u7C7B\u578B\uFF0C\u8981\u6C42\u5927\u5230\u8DB3\u4EE5\u8868\u793A\u4EFB\u4F55 UTF-16 \u7F16\u7801\u5355\u5143\uFF08 16 \u4F4D\uFF09\u3002\u5B83\u4E0E std::uint_least16_t \u5177\u6709\u76F8\u540C\u7684\u5927\u5C0F\u3001\u7B26\u53F7\u6027\u548C\u5BF9\u9F50\uFF0C\u4F46\u5B83\u662F\u72EC\u7ACB\u7684\u7C7B\u578B\u3002</p><p><code>char32_t</code> - UTF-32 \u5B57\u7B26\u8868\u793A\u7684\u7C7B\u578B\uFF0C\u8981\u6C42\u5927\u5230\u8DB3\u4EE5\u8868\u793A\u4EFB\u4F55 UTF-32 \u7F16\u7801\u5355\u5143\uFF08 32 \u4F4D\uFF09\u3002\u5B83\u4E0E std::uint_least32_t \u5177\u6709\u76F8\u540C\u7684\u5927\u5C0F\u3001\u7B26\u53F7\u6027\u548C\u5BF9\u9F50\uFF0C\u4F46\u5B83\u662F\u72EC\u7ACB\u7684\u7C7B\u578B\u3002</p><h3 id="\u5B57\u7B26\u4E32\u5B57\u9762\u91CF" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u5B57\u9762\u91CF" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u5B57\u9762\u91CF</h3><ol><li><p>&quot; \u4E32\u5B57\u7B26\u5E8F\u5217 &quot;</p><p>\u7A84\u591A\u5B57\u8282\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002\u65E0\u524D\u7F00\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7684\u7C7B\u578B\u662F const char[N]\uFF0C\u5176\u4E2D N \u662F\u4EE5\u6267\u884C\u7A84\u7F16\u7801\u7684\u7F16\u7801\u5355\u5143\u8BA1\u7684\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\uFF0C\u5305\u542B\u7A7A\u7EC8\u6B62\u7B26\u3002</p></li><li><p>L&quot; \u4E32\u5B57\u7B26\u5E8F\u5217 &quot;</p><p>\u5BBD\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002L&quot;...&quot; \u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7684\u7C7B\u578B\u662F const wchar_t[N]\uFF0C\u5176\u4E2D N \u662F\u4EE5\u6267\u884C\u5BBD\u7F16\u7801\u7684\u7F16\u7801\u5355\u5143\u8BA1\u7684\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\uFF0C\u5305\u542B\u7A7A\u7EC8\u6B62\u7B26\u3002</p></li><li><p>u8&quot; \u4E32\u5B57\u7B26\u5E8F\u5217 &quot; (C++11 \u8D77)</p><p>UTF-8 \u7F16\u7801\u7684\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002u8&quot;...&quot; \u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7684\u7C7B\u578B\u662F const char[N] (C++20 \u524D)const char8_t[N] (C++20 \u8D77)\uFF0C\u5176\u4E2D N \u662F\u4EE5 UTF-8 \u7F16\u7801\u5355\u5143\u8BA1\u7684\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\uFF0C\u5305\u542B\u7A7A\u7EC8\u6B62\u7B26\u3002</p></li><li><p>u&quot; \u4E32\u5B57\u7B26\u5E8F\u5217 &quot; (C++11 \u8D77)</p><p>UTF-16 \u7F16\u7801\u7684\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002u&quot;...&quot; \u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7684\u7C7B\u578B\u662F const char16_t[N]\uFF0C\u5176\u4E2D N \u662F\u4EE5 UTF-16 \u7F16\u7801\u5355\u5143\u8BA1\u7684\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\uFF0C\u5305\u542B\u7A7A\u7EC8\u6B62\u7B26\u3002</p></li><li><p>U&quot; \u4E32\u5B57\u7B26\u5E8F\u5217 &quot; (C++11 \u8D77)</p><p>UTF-32 \u7F16\u7801\u7684\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002U&quot;...&quot; \u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7684\u7C7B\u578B\u662F const char32_t[N]\uFF0C\u5176\u4E2D N \u662F\u4EE5 UTF-32 \u7F16\u7801\u5355\u5143\u8BA1\u7684\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\uFF0C\u5305\u542B\u7A7A\u7EC8\u6B62\u7B26\u3002</p></li><li><p>\u524D\u7F00(\u53EF\u9009) R&quot;\u5206\u9694\u7B26( \u539F\u59CB\u5B57\u7B26 )\u5206\u9694\u7B26&quot; (C++11 \u8D77)</p><p>\u539F\u59CB\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u3002\u7528\u4E8E\u907F\u514D\u8F6C\u4E49\u4EFB\u4F55\u5B57\u7B26\u3002\u5206\u9694\u7B26\u95F4\u7684\u4EFB\u4F55\u5185\u5BB9\u90FD\u6210\u4E3A\u5B57\u7B26\u4E32\u7684\u4E00\u90E8\u5206\u3002\u82E5\u5B58\u5728 \u524D\u7F00 \u5219\u5177\u6709\u4E0E\u4E0A\u8FF0\u76F8\u540C\u7684\u542B\u4E49\u3002</p></li></ol><h3 id="\u53D8\u53C2\u6570\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#\u53D8\u53C2\u6570\u6A21\u677F" aria-hidden="true">#</a> \u53D8\u53C2\u6570\u6A21\u677F</h3><p>\u6A21\u677F\u5F62\u53C2\u5305\u662F\u63A5\u53D7\u96F6\u6216\u66F4\u591A\u6A21\u677F\u5B9E\u53C2\uFF08\u975E\u7C7B\u578B\u3001\u7C7B\u578B\u6216\u6A21\u677F\uFF09\u7684\u6A21\u677F\u5F62\u53C2\u3002\u51FD\u6570\u6A21\u677F\u5F62\u53C2\u5305\u662F\u63A5\u53D7\u96F6\u6216\u66F4\u591A\u51FD\u6570\u5B9E\u53C2\u7684\u51FD\u6570\u5F62\u53C2\u3002</p><p>\u81F3\u5C11\u6709\u4E00\u4E2A\u5F62\u53C2\u5305\u7684\u6A21\u677F\u88AB\u79F0\u4F5C\u53D8\u53C2\u6A21\u677F\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// \u56E0\u4E3A\u521D\u59CB\u5316\u5668\u5217\u8868\u4FDD\u8BC1\u987A\u5E8F\uFF0C\u6240\u4EE5\u8FD9\u53EF\u7528\u4E8E\u6309\u987A\u5E8F\u5BF9\u5305\u7684\u6BCF\u4E2A\u5143\u7D20\u8C03\u7528\u51FD\u6570\uFF1A</span>
    <span class="token keyword">int</span> dummy<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Ts<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> args<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="c-14" tabindex="-1"><a class="header-anchor" href="#c-14" aria-hidden="true">#</a> C++14</h2><h3 id="std-shared-timed-mutex" tabindex="-1"><a class="header-anchor" href="#std-shared-timed-mutex" aria-hidden="true">#</a> std::shared_timed_mutex</h3><p>shared_timed_mutex \u7C7B\u662F\u80FD\u7528\u4E8E\u4FDD\u62A4\u6570\u636E\u514D\u53D7\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u7684\u540C\u6B65\u539F\u8BED\u3002\u4E0E\u5176\u4ED6\u4FC3\u8FDB\u6392\u4ED6\u6027\u8BBF\u95EE\u7684\u4E92\u65A5\u7C7B\u578B\u76F8\u53CD\uFF0C\u62E5\u6709\u4E8C\u4E2A\u5C42\u6B21\u7684\u8BBF\u95EE\uFF1A</p><ol><li>\u5171\u4EAB - \u591A\u4E2A\u7EBF\u7A0B\u80FD\u5171\u4EAB\u540C\u4E00\u4E92\u65A5\u7684\u6240\u6709\u6743\u3002</li><li>\u6392\u4ED6\u6027 - \u4EC5\u4E00\u4E2A\u7EBF\u7A0B\u80FD\u5360\u6709\u4E92\u65A5\u3002</li></ol><p>\u5171\u4EAB\u4E92\u65A5\u901A\u5E38\u7528\u4E8E\u591A\u4E2A\u8BFB\u7EBF\u7A0B\u80FD\u540C\u65F6\u8BBF\u95EE\u540C\u4E00\u8D44\u6E90\u800C\u4E0D\u5BFC\u81F4\u6570\u636E\u7ADE\u4E89\uFF0C\u4F46\u53EA\u6709\u4E00\u4E2A\u5199\u7EBF\u7A0B\u80FD\u8BBF\u95EE\u7684\u60C5\u5F62\u3002</p><p>\u4EE5\u7C7B\u4F3C timed_mutex \u7684\u884C\u4E3A\uFF0C shared_timed_mutex \u63D0\u4F9B\u901A\u8FC7 try_lock_for() \u3001 try_lock_until() \u3001 try_lock_shared_for() \u3001 try_lock_shared_until() \u65B9\u6CD5\uFF0C\u8BD5\u56FE\u5E26\u65F6\u9650\u5730\u8981\u6C42 shared_timed_mutex \u6240\u6709\u6743\u7684\u80FD\u529B\u3002</p><h3 id="std-shared-lock" tabindex="-1"><a class="header-anchor" href="#std-shared-lock" aria-hidden="true">#</a> std::shared_lock</h3><p>\u7C7B shared_lock \u662F\u901A\u7528\u5171\u4EAB\u4E92\u65A5\u6240\u6709\u6743\u5305\u88C5\u5668\uFF0C\u5141\u8BB8\u5EF6\u8FDF\u9501\u5B9A\u3001\u5B9A\u65F6\u9501\u5B9A\u548C\u9501\u6240\u6709\u6743\u7684\u8F6C\u79FB\u3002\u9501\u5B9A shared_lock \uFF0C\u4F1A\u4EE5\u5171\u4EAB\u6A21\u5F0F\u9501\u5B9A\u5173\u8054\u7684\u5171\u4EAB\u4E92\u65A5\uFF08 std::unique_lock \u53EF\u7528\u4E8E\u4EE5\u6392\u4ED6\u6027\u6A21\u5F0F\u9501\u5B9A\uFF09\u3002</p><p>shared_lock \u7C7B\u53EF\u79FB\u52A8\uFF0C\u4F46\u4E0D\u53EF\u590D\u5236\u2014\u2014\u5B83\u6EE1\u8DB3\u53EF\u79FB\u52A8\u6784\u9020 (MoveConstructible) \u4E0E\u53EF\u79FB\u52A8\u8D4B\u503C (MoveAssignable) \u7684\u8981\u6C42\uFF0C\u4F46\u4E0D\u6EE1\u8DB3\u53EF\u590D\u5236\u6784\u9020 (CopyConstructible) \u6216\u53EF\u590D\u5236\u8D4B\u503C (CopyAssignable) \u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;shared_mutex&gt;</span></span>
 
<span class="token keyword">class</span> <span class="token class-name">R</span>
<span class="token punctuation">{</span>
    <span class="token keyword">mutable</span> std<span class="token double-colon punctuation">::</span>shared_timed_mutex mut<span class="token punctuation">;</span>
    <span class="token comment">/* \u6570\u636E */</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    R<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> R<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// \u8981\u6C42\u6392\u4ED6\u6027\u6240\u6709\u6743\u4EE5\u5199\u5165 *this</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_timed_mutex<span class="token operator">&gt;</span> <span class="token function">lhs</span><span class="token punctuation">(</span>mut<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>defer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8981\u6C42\u5171\u4EAB\u6240\u6709\u6743\u4EE5\u8BFB\u53D6 other</span>
        std<span class="token double-colon punctuation">::</span>shared_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_timed_mutex<span class="token operator">&gt;</span> <span class="token function">rhs</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>mut<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>defer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">lock</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* \u8D4B\u503C\u6570\u636E */</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    R r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="c-17" tabindex="-1"><a class="header-anchor" href="#c-17" aria-hidden="true">#</a> C++17</h2><h3 id="std-shared-mutex" tabindex="-1"><a class="header-anchor" href="#std-shared-mutex" aria-hidden="true">#</a> std::shared_mutex</h3><p>shared_mutex \u7C7B\u662F\u4E00\u4E2A\u540C\u6B65\u539F\u8BED\uFF0C\u53EF\u7528\u4E8E\u4FDD\u62A4\u5171\u4EAB\u6570\u636E\u4E0D\u88AB\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BBF\u95EE\u3002\u4E0E\u4FBF\u4E8E\u72EC\u5360\u8BBF\u95EE\u7684\u5176\u4ED6\u4E92\u65A5\u7C7B\u578B\u4E0D\u540C\uFF0Cshared_mutex \u62E5\u6709\u4E8C\u4E2A\u8BBF\u95EE\u7EA7\u522B\uFF1A</p><ul><li>\u5171\u4EAB - \u591A\u4E2A\u7EBF\u7A0B\u80FD\u5171\u4EAB\u540C\u4E00\u4E92\u65A5\u7684\u6240\u6709\u6743\u3002</li><li>\u72EC\u5360\u6027 - \u4EC5\u4E00\u4E2A\u7EBF\u7A0B\u80FD\u5360\u6709\u4E92\u65A5\u3002</li></ul><p>\u82E5\u4E00\u4E2A\u7EBF\u7A0B\u5DF2\u83B7\u53D6\u72EC\u5360\u6027\u9501\uFF08\u901A\u8FC7 lock \u3001 try_lock \uFF09\uFF0C\u5219\u65E0\u5176\u4ED6\u7EBF\u7A0B\u80FD\u83B7\u53D6\u8BE5\u9501\uFF08\u5305\u62EC\u5171\u4EAB\u7684\uFF09\u3002</p><p>\u4EC5\u5F53\u4EFB\u4F55\u7EBF\u7A0B\u5747\u672A\u83B7\u53D6\u72EC\u5360\u6027\u9501\u65F6\uFF0C\u5171\u4EAB\u9501\u80FD\u88AB\u591A\u4E2A\u7EBF\u7A0B\u83B7\u53D6\uFF08\u901A\u8FC7 lock_shared \u3001 try_lock_shared \uFF09\u3002</p><p>\u5728\u4E00\u4E2A\u7EBF\u7A0B\u5185\uFF0C\u540C\u4E00\u65F6\u523B\u53EA\u80FD\u83B7\u53D6\u4E00\u4E2A\u9501\uFF08\u5171\u4EAB\u6216\u72EC\u5360\u6027\uFF09\u3002</p><p>\u5171\u4EAB\u4E92\u65A5\u4F53\u5728\u80FD\u7531\u4EFB\u4F55\u6570\u91CF\u7684\u7EBF\u7A0B\u540C\u65F6\u8BFB\u5171\u4EAB\u6570\u636E\uFF0C\u4F46\u4E00\u4E2A\u7EBF\u7A0B\u53EA\u80FD\u5728\u65E0\u5176\u4ED6\u7EBF\u7A0B\u540C\u65F6\u8BFB\u5199\u65F6\u5199\u540C\u4E00\u6570\u636E\u65F6\u7279\u522B\u6709\u7528\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span>  <span class="token comment">// \u5BF9\u4E8E std::unique_lock</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;shared_mutex&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
 
<span class="token keyword">class</span> <span class="token class-name">ThreadSafeCounter</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">ThreadSafeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
 
  <span class="token comment">// \u591A\u4E2A\u7EBF\u7A0B/\u8BFB\u8005\u80FD\u540C\u65F6\u8BFB\u8BA1\u6570\u5668\u7684\u503C\u3002</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>shared_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token comment">// \u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B/\u5199\u8005\u80FD\u589E\u52A0/\u5199\u7EBF\u7A0B\u7684\u503C\u3002</span>
  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    value_<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token comment">// \u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B/\u5199\u8005\u80FD\u91CD\u7F6E/\u5199\u7EBF\u7A0B\u7684\u503C\u3002</span>
  <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    value_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">mutable</span> std<span class="token double-colon punctuation">::</span>shared_mutex mutex_<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ThreadSafeCounter counter<span class="token punctuation">;</span>
 
  <span class="token keyword">auto</span> increment_and_print <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>counter<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
 
      <span class="token comment">// \u6CE8\u610F\uFF1A\u5199\u5165 std::cout \u5B9E\u9645\u4E0A\u4E5F\u8981\u7531\u53E6\u4E00\u4E92\u65A5\u540C\u6B65\u3002\u7701\u7565\u5B83\u4EE5\u4FDD\u6301\u793A\u4F8B\u7B80\u6D01\u3002</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
  std<span class="token double-colon punctuation">::</span>thread <span class="token function">thread1</span><span class="token punctuation">(</span>increment_and_print<span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>thread <span class="token function">thread2</span><span class="token punctuation">(</span>increment_and_print<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// \u89E3\u91CA\uFF1A\u4E0B\u5217\u8F93\u51FA\u5728\u5355\u6838\u673A\u5668\u4E0A\u751F\u6210\u3002 thread1 \u5F00\u59CB\u65F6\uFF0C\u5B83\u9996\u6B21\u8FDB\u5165\u5FAA\u73AF\u5E76\u8C03\u7528 increment() \uFF0C</span>
<span class="token comment">// \u968F\u540E\u8C03\u7528 get() \u3002\u7136\u800C\uFF0C\u5728\u5B83\u80FD\u6253\u5370\u8FD4\u56DE\u503C\u5230 std::cout \u524D\uFF0C\u8C03\u5EA6\u5668\u5C06 thread1 \u7F6E\u4E8E\u4F11\u7720</span>
<span class="token comment">// \u5E76\u5524\u9192 thread2 \uFF0C\u5B83\u663E\u7136\u6709\u8DB3\u591F\u65F6\u95F4\u4E00\u6B21\u8FD0\u884C\u5168\u90E8\u4E09\u4E2A\u5FAA\u73AF\u8FED\u4EE3\u3002\u518D\u56DE\u5230 thread1 \uFF0C\u5B83\u4ECD\u5728\u9996\u4E2A</span>
<span class="token comment">// \u5FAA\u73AF\u8FED\u4EE3\u4E2D\uFF0C\u5B83\u6700\u7EC8\u6253\u5370\u5176\u5C40\u90E8\u7684\u8BA1\u6570\u5668\u526F\u672C\u7684\u503C\uFF0C\u5373 1 \u5230 std::cout \uFF0C\u518D\u8FD0\u884C\u5269\u4E0B\u4E8C\u4E2A\u5FAA\u73AF\u3002</span>
<span class="token comment">// \u591A\u6838\u673A\u5668\u4E0A\uFF0C\u6CA1\u6709\u7EBF\u7A0B\u88AB\u7F6E\u4E8E\u4F11\u7720\uFF0C\u4E14\u8F93\u51FA\u66F4\u53EF\u80FD\u4E3A\u9012\u589E\u987A\u5E8F\u3002</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h3 id="std-scoped-lock" tabindex="-1"><a class="header-anchor" href="#std-scoped-lock" aria-hidden="true">#</a> std::scoped_lock</h3><p>\u7C7B scoped_lock \u662F\u63D0\u4F9B\u4FBF\u5229 RAII \u98CE\u683C\u673A\u5236\u7684\u4E92\u65A5\u5305\u88C5\u5668\uFF0C\u5B83\u5728\u4F5C\u7528\u57DF\u5757\u7684\u5B58\u5728\u671F\u95F4\u5360\u6709\u4E00\u6216\u591A\u4E2A\u4E92\u65A5\u3002</p><p>\u521B\u5EFA scoped_lock \u5BF9\u8C61\u65F6\uFF0C\u5B83\u8BD5\u56FE\u53D6\u5F97\u7ED9\u5B9A\u4E92\u65A5\u7684\u6240\u6709\u6743\u3002\u63A7\u5236\u79BB\u5F00\u521B\u5EFA scoped_lock \u5BF9\u8C61\u7684\u4F5C\u7528\u57DF\u65F6\uFF0C\u6790\u6784 scoped_lock \u5E76\u91CA\u653E\u4E92\u65A5\u3002\u82E5\u7ED9\u51FA\u6570\u4E2A\u4E92\u65A5\uFF0C\u5219\u4F7F\u7528\u514D\u6B7B\u9501\u7B97\u6CD5\uFF0C\u5982\u540C\u4EE5 std::lock \u3002</p><p>scoped_lock \u7C7B\u4E0D\u53EF\u590D\u5236\u3002</p><h3 id="std-filesystem" tabindex="-1"><a class="header-anchor" href="#std-filesystem" aria-hidden="true">#</a> std::filesystem</h3><p>\u65B0\u589E\u7684\u6587\u4EF6\u6807\u51C6\u5E93\uFF0C\u5BF9\u6587\u4EF6\u7684\u64CD\u4F5C\u4ECE\u672A\u6709\u8FC7\u7684\u7B80\u5355\u3002\u4E00\u4E9B\u5E38\u7528\u7684\u51FD\u6570\u5982\u4E0B\uFF1A</p><ol><li>absolute \u7EC4\u6210\u4E00\u4E2A\u7EDD\u5BF9\u8DEF\u5F84</li><li>copy \u590D\u5236\u6587\u4EF6\u6216\u76EE\u5F55</li><li>copy_file \u590D\u5236\u6587\u4EF6\u5185\u5BB9</li><li>copy_symlink \u590D\u5236\u4E00\u4E2A\u7B26\u53F7\u94FE\u63A5</li><li>create_directory \u521B\u5EFA\u65B0\u76EE\u5F55</li><li>create_directories \u521B\u5EFA\u65B0\u76EE\u5F55</li><li>current_path \u8FD4\u56DE\u6216\u8BBE\u7F6E\u5F53\u524D\u5DE5\u4F5C\u76EE\u5F55</li><li>exists \u68C0\u67E5\u8DEF\u5F84\u662F\u5426\u6307\u4EE3\u65E2\u5B58\u7684\u6587\u4EF6\u7CFB\u7EDF\u5BF9\u8C61</li><li>file_size \u8FD4\u56DE\u6587\u4EF6\u7684\u5927\u5C0F</li><li>permissions \u4FEE\u6539\u6587\u4EF6\u8BBF\u95EE\u6743\u9650</li><li>remove \u79FB\u9664\u4E00\u4E2A\u6587\u4EF6\u6216\u7A7A\u76EE\u5F55</li><li>remove_all \u79FB\u9664\u4E00\u4E2A\u6587\u4EF6\u6216\u9012\u5F52\u5730\u79FB\u9664\u4E00\u4E2A\u76EE\u5F55\u53CA\u5176\u6240\u6709\u5185\u5BB9</li><li>rename \u79FB\u52A8\u6216\u91CD\u547D\u540D\u4E00\u4E2A\u6587\u4EF6\u6216\u76EE\u5F55</li><li>resize_file \u4EE5\u622A\u65AD\u6216\u586B\u5145\u96F6\u66F4\u6539\u4E00\u4E2A\u5E38\u89C4\u6587\u4EF6\u7684\u5927\u5C0F</li><li>is_directory \u68C0\u67E5\u7ED9\u5B9A\u7684\u8DEF\u5F84\u662F\u5426\u8868\u793A\u4E00\u4E2A\u76EE\u5F55</li><li>is_empty \u68C0\u67E5\u7ED9\u5B9A\u7684\u8DEF\u5F84\u662F\u5426\u8868\u793A\u4E00\u4E2A\u7A7A\u6587\u4EF6\u6216\u7A7A\u76EE\u5F55</li></ol><p>\u8FD8\u6709\u4E00\u4E9B\u4F7F\u7528\u7684\u7C7B\uFF1A</p><ol><li>path \u8868\u793A\u8DEF\u5F84</li><li>directory_entry \u76EE\u5F55\u6761\u76EE</li><li>directory_iterator \u6307\u5411\u76EE\u5F55\u5185\u5BB9\u7684\u8FED\u4EE3\u5668</li><li>recursive_directory_iterator \u6307\u5411\u4E00\u4E2A\u76EE\u5F55\u53CA\u5176\u5B50\u76EE\u5F55\u7684\u5185\u5BB9\u7684\u8FED\u4EE3\u5668</li><li>file_status \u8868\u793A\u6587\u4EF6\u7C7B\u578B\u53CA\u6743\u9650</li><li>space_info \u5173\u4E8E\u6587\u4EF6\u7CFB\u7EDF\u4E0A\u7A7A\u95F2\u53CA\u53EF\u7528\u7A7A\u95F4\u7684\u4FE1\u606F</li></ol><h3 id="std-reduce" tabindex="-1"><a class="header-anchor" href="#std-reduce" aria-hidden="true">#</a> std::reduce</h3><p>\u8BE5\u51FD\u6570\u6A21\u677F\u4E0E std::accumulate \u4F7F\u7528\u65B9\u5F0F\u57FA\u672C\u4E00\u81F4\uFF0C\u90FD\u662F\u5BF9\u4E00\u4E2A\u8303\u56F4\u5185\u7684\u5143\u7D20\u6C42\u548C\u3002</p><p>\u4F46 reduce \u591A\u4E86\u4E2A\u6267\u884C\u7B56\u7565\u53EF\u4EE5\u9009\u62E9\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u5B9A\u4E49\u4E8E\u5934\u6587\u4EF6 &lt;execution&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">sequenced_policy</span> <span class="token punctuation">{</span> <span class="token comment">/* unspecified */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//(1) (C++17 \u8D77)</span>
<span class="token keyword">class</span> <span class="token class-name">parallel_policy</span> <span class="token punctuation">{</span> <span class="token comment">/* unspecified */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//(2) (C++17 \u8D77)</span>
<span class="token keyword">class</span> <span class="token class-name">parallel_unsequenced_policy</span> <span class="token punctuation">{</span> <span class="token comment">/* unspecified */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//(3) (C++17 \u8D77)</span>
<span class="token keyword">class</span> <span class="token class-name">unsequenced_policy</span> <span class="token punctuation">{</span> <span class="token comment">/* unspecified */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//(4) (C++20 \u8D77)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li>\u4EE5\u8BE5\u6267\u884C\u7B56\u7565\u7C7B\u578B\u4E3A\u4E00\u79CD\u72EC\u6709\u7C7B\u578B\uFF0C\u5BF9\u5E76\u884C\u7B97\u6CD5\u91CD\u8F7D\u6D88\u6B67\u4E49\uFF0C\u5E76\u8981\u6C42\u5E76\u884C\u7B97\u6CD5\u7684\u6267\u884C\u53EF\u4EE5\u4E0D\u5E76\u884C\u5316\u3002\u4EE5\u6B64\u7B56\u7565\u8C03\u7528\uFF08\u901A\u5E38\u4EE5 std::execution::seq \u6307\u5B9A\uFF09\u7684\u5E76\u884C\u7B97\u6CD5\u4E2D\uFF0C\u5143\u7D20\u8BBF\u95EE\u51FD\u6570\u7684\u8C03\u7528\u5728\u8C03\u7528\u65B9\u7EBF\u7A0B\u4E2D\u662F\u975E\u786E\u5B9A\u987A\u5E8F\u7684\u3002</li><li>\u4EE5\u8BE5\u6267\u884C\u7B56\u7565\u7C7B\u578B\u4E3A\u4E00\u79CD\u72EC\u6709\u7C7B\u578B\uFF0C\u5BF9\u5E76\u884C\u7B97\u6CD5\u91CD\u8F7D\u6D88\u6B67\u4E49\uFF0C\u5E76\u6307\u793A\u5E76\u884C\u7B97\u6CD5\u7684\u6267\u884C\u53EF\u4EE5\u5E76\u884C\u5316\u3002\u4EE5\u6B64\u7B56\u7565\u8C03\u7528\uFF08\u901A\u5E38\u4EE5 std::execution::par \u6307\u5B9A\uFF09\u7684\u5E76\u884C\u7B97\u6CD5\u4E2D\uFF0C\u5143\u7D20\u8BBF\u95EE\u51FD\u6570\u7684\u8C03\u7528\u5141\u8BB8\u5728\u8C03\u7528\u65B9\u7EBF\u7A0B\uFF0C\u6216\u7531\u5E93\u9690\u5F0F\u521B\u5EFA\u7684\u7EBF\u7A0B\u4E2D\u6267\u884C\uFF0C\u4EE5\u652F\u6301\u5E76\u884C\u7B97\u6CD5\u6267\u884C\u3002\u4EFB\u4F55\u6267\u884C\u4E8E\u540C\u4E00\u7EBF\u7A0B\u4E2D\u7684\u8FD9\u79CD\u8C03\u7528\u5F7C\u6B64\u95F4\u662F\u975E\u786E\u5B9A\u987A\u5E8F\u7684\uFF0C</li><li>\u4EE5\u8BE5\u6267\u884C\u7B56\u7565\u7C7B\u578B\u4E3A\u4E00\u79CD\u72EC\u6709\u7C7B\u578B\uFF0C\u5BF9\u5E76\u884C\u7B97\u6CD5\u91CD\u8F7D\u6D88\u6B67\u4E49\uFF0C\u5E76\u6307\u793A\u5E76\u884C\u7B97\u6CD5\u7684\u6267\u884C\u53EF\u4EE5\u5E76\u884C\u5316\u3001\u5411\u91CF\u5316\uFF0C\u6216\u5728\u7EBF\u7A0B\u95F4\u8FC1\u79FB\uFF08\u4F8B\u5982\u7528\u4EB2\u7A83\u53D6\u7684\u8C03\u5EA6\u5668\uFF09\u3002\u5BB9\u8BB8\u4EE5\u6B64\u7B56\u7565\u8C03\u7528\u7684\u5E76\u884C\u7B97\u6CD5\u4E2D\u7684\u5143\u7D20\u8BBF\u95EE\u51FD\u6570\u8C03\u7528\u5728\u672A\u6307\u5B9A\u7EBF\u7A0B\u4E2D\u4EE5\u65E0\u5E8F\u65B9\u5F0F\u6267\u884C\uFF0C\u5E76\u76F8\u5BF9\u4E8E\u6BCF\u4E2A\u7EBF\u7A0B\u4E2D\u7684\u53E6\u4E00\u8C03\u7528\u65E0\u987A\u5E8F\u3002</li><li>\u4EE5\u8BE5\u6267\u884C\u7B56\u7565\u7C7B\u578B\u4E3A\u4E00\u79CD\u72EC\u6709\u7C7B\u578B\uFF0C\u5BF9\u5E76\u884C\u7B97\u6CD5\u91CD\u8F7D\u6D88\u6B67\u4E49\uFF0C\u5E76\u6307\u793A\u53EF\u5C06\u7B97\u6CD5\u7684\u6307\u5411\u5411\u91CF\u5316\uFF0C\u4F8B\u5982\u5728\u5355\u4E2A\u7EBF\u7A0B\u4E0A\u4F7F\u7528\u5728\u591A\u4E2A\u6570\u636E\u9879\u4E0A\u64CD\u4F5C\u7684\u6307\u4EE4\u6307\u6267\u884C\u3002</li></ol><p><img src="https://pic4.zhimg.com/80/v2-93efa2ed72b75b42c7f386d1d126f883_1440w.jpg" alt="img"></p><p>\u4F7F\u7528\u7279\u5B9A\u7684\u6267\u884C\u7B56\u7565\u53EF\u4EE5\u5B9E\u73B0\u5E76\u884C\u8FD0\u7B97\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;execution&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10&#39;000&#39;007</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> t1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> t2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>milli<span class="token operator">&gt;</span> ms <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>fixed <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;std::accumulate result &quot;</span> <span class="token operator">&lt;&lt;</span> result
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; took &quot;</span> <span class="token operator">&lt;&lt;</span> ms<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; ms\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> t1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">reduce</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>execution<span class="token double-colon punctuation">::</span>par<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> t2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>milli<span class="token operator">&gt;</span> ms <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;std::reduce result &quot;</span>
                  <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; took &quot;</span> <span class="token operator">&lt;&lt;</span> ms<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; ms\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u53EF\u80FD\u7684\u8F93\u51FA\uFF1A</span>
<span class="token comment">// std::accumulate result 5000003.50000 took 12.7365 ms</span>
<span class="token comment">// std::reduce result 5000003.50000 took 5.06423 ms</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>`,109);function x(q,T){const a=e("ExternalLinkIcon");return o(),c(l,null,[i,s("p",null,[k,s("a",d,[b,p(a)]),m,s("a",h,[g,p(a)])]),f,s("p",null,[y,s("a",_,[w,p(a)])]),v],64)}var U=u(r,[["render",x]]);export{U as default};
